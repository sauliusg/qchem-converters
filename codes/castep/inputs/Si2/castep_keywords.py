"""This file is generated byase/calculators/castep.py
and is not distributed with ASE to avoid breakingCASTEP copyright
"""
class Opt:
    """"A CASTEP option"""
    def __init__(self):
        self.keyword = None
        self.level = None
        self.value = None
        self.type = None
    def clear(self):
        """Reset the value of the option to None again"""
        self.value = None
    def __repr__(self):
        expr = ''
        if self.value:
            expr += 'Option: %s(%s, %s):\n%s\n'% (self.keyword, self.type, self.level, self.value)
        else:
            expr += 'Option: %s[unset]' % self.keyword
            expr += '(%s, %s)' % (self.type, self.level)
        return expr

class ComparableDict(dict):
    """Extends a dict to make to sets of options comparable"""
    def __init__(self):
        dict.__init__(self)

    def __ne__(self, other):
        return not self.__eq__(other)

    def __eq__(self, other):
        if not isinstance(other, ComparableDict):
            return False
        if set(self) - set(other):
            return False
        for key in sorted(self):
            if self[key].value != other[key].value:
                return False
        return True


class CastepCellDict(object):
    """A flat object that holds cell options"""
    def __init__(self):
        object.__init__(self)
        self._options = ComparableDict()
        opt_obj = Opt()
        opt_obj.keyword = 'lattice_cart'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The cell lattice vectors (3x3 matrix) in Cartesian coordinates.  Optionally, length units may be specified on the first line.
"""
        opt_obj.value = None
        self._options['lattice_cart'] = opt_obj

        self.__dict__['lattice_cart'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'lattice_abc'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The lattice vectors specified in a,b,c,alpha,beta,gamma format.  Optionally, length units may be specified on the first line
"""
        opt_obj.value = None
        self._options['lattice_abc'] = opt_obj

        self.__dict__['lattice_abc'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'positions_frac'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The species followed by the atomic position in fractional coordinates.  The species may be given as the chemical symbol or atomic number followed  by the atomic position in fractional coordinates.
Example:
%block positions_frac
Si 0.25 0.25 0.25
%endblock positions_frac
"""
        opt_obj.value = None
        self._options['positions_frac'] = opt_obj

        self.__dict__['positions_frac'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'positions_abs'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The species followed by the atomic position in abolute coordinates.  The species may be given as the chemical symbol or atomic number.  Optionally, length units may be specified on the first line
Example:
%block positions_abs
Si 1.5 1.5 1.5
%endblock positions_abs
or
%block positions_abs
Ang
Si 1.5 1.5 1.5
%endblock positions_abs
"""
        opt_obj.value = None
        self._options['positions_abs'] = opt_obj

        self.__dict__['positions_abs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'symmetry_generate'
        opt_obj.type = 'Defined'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If present, then the crystal symmetry rotations/translations will be generated automatically.  Default value: If not present, no symmetry elements are generated.
"""
        opt_obj.value = None
        self._options['symmetry_generate'] = opt_obj

        self.__dict__['symmetry_generate'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'symmetry_ops'
        opt_obj.type = 'Block'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """The symmetry operations (rotation/translations) applied to the cell.  These must be consistent with the crystal symmetry  Example:
%block symmetry_ops
1.0  0.0  0.0 ! 3x3 rotation matrix
0.0  1.0  0.0
0.0  0.0  1.0
0.0  0.0  0.0  ! Translation vector
1.0  0.0  0.0 ! 3x3 rotation matrix
0.0 -1.0  0.0
0.0  0.0  1.0
0.0  0.0  0.0  ! Translation vector
%endblock symmetry_ops
"""
        opt_obj.value = None
        self._options['symmetry_ops'] = opt_obj

        self.__dict__['symmetry_ops'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'symmetry_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The maximum tolerance used when searching for symmetry operations.  Units of length must be specified  Example:
symmetry_tol 0.001 ang
"""
        opt_obj.value = None
        self._options['symmetry_tol'] = opt_obj

        self.__dict__['symmetry_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ionic_constraints'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of the constraints on the motion of the ions  during relaxation or molecular dynamics  Default value: None, unless FIX_COM is specified.
"""
        opt_obj.value = None
        self._options['ionic_constraints'] = opt_obj

        self.__dict__['ionic_constraints'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fix_com'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If keyword is present, the centre of mass of the ions will remain fixed  during a geometry optimisation or molecular dynamics simulation.  Example:
fix_com
"""
        opt_obj.value = None
        self._options['fix_com'] = opt_obj

        self.__dict__['fix_com'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'cell_constraints'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of constraints on the unit cell parameters used in a  geometry optimisation or molecular dynamics simulation.  Example:
%block cell_constraints
1 1 3  ! a=b can vary but tied equal, c free to vary
0 0 0  ! Fix alpha, beta and gamma
%endblock cell_constraints
"""
        opt_obj.value = None
        self._options['cell_constraints'] = opt_obj

        self.__dict__['cell_constraints'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'external_pressure'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The exernal pressure tensor applied to the cell during a molecular dynamics or  geometry optimisation. Shear stresses can also be applied (off-diagonal terms).  Optionally, units of pressure may also be given.
%block external_pressure
GPa ! Units optional
4.0 0.0 0.0 ! Isotropic presssure of 4GPa
4.0 0.0 ! Only upper half of 3x3 matrix specified
4.0 ! Castep makes symetric lower half
%endblock external_pressure
Default value: 0.0 GPa
"""
        opt_obj.value = None
        self._options['external_pressure'] = opt_obj

        self.__dict__['external_pressure'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fix_all_ions'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If present, all ions remain fixed, in a geometry optimisation.  Default value: False.
"""
        opt_obj.value = None
        self._options['fix_all_ions'] = opt_obj

        self.__dict__['fix_all_ions'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fix_all_cell'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If present, all lattice parameters will remain fixed during a geometry optimisation or MD run.  Default value: False.
"""
        opt_obj.value = None
        self._options['fix_all_cell'] = opt_obj

        self.__dict__['fix_all_cell'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'species_mass'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The mass of the atomic species used in the simulation.  Optionally, units of mass may be specified.
Example:
%block species_mass
amu  ! units optional
H 2.01410178 ! Deuterium instead of hydrogen
%endblock cell_constraints
"""
        opt_obj.value = None
        self._options['species_mass'] = opt_obj

        self.__dict__['species_mass'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'species_pot'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Pseudopotentials may be specified individually per species or for every  element from internal or external libraries.
"""
        opt_obj.value = None
        self._options['species_pot'] = opt_obj

        self.__dict__['species_pot'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ionic_velocities'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The initial velocities of the ions used in a molecular dynamics simulation.  Optionally, units of velocity may be specified.  Default value: 0.0 ang/ps
"""
        opt_obj.value = None
        self._options['ionic_velocities'] = opt_obj

        self.__dict__['ionic_velocities'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'species_lcao_states'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The number of LCAO states to use for a population analysis calculation.  Default value: Determined from the pseudopotential orbitals.
"""
        opt_obj.value = None
        self._options['species_lcao_states'] = opt_obj

        self.__dict__['species_lcao_states'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoints_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of k-points in the brillouin zone (with associated weights)  used for BZ integration during and SCF calculation.  The k-point weights must sum to 1.
Example:
%block kpooints_list
0.25  0.25  0.25  0.25 ! kx ky kz weight
0.25 -0.25  0.25  0.25
0.25  0.25 -0.25  0.25
0.25 -0.25 -0.25  0.25
%endblock kpooints_list
"""
        opt_obj.value = None
        self._options['kpoints_list'] = opt_obj

        self.__dict__['kpoints_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoints_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-points defined by a Monkhorst-Pack grid.  Symmetry (if specified) will be used to generate the SCF k-point list and weights.
Example:
kpoints_mp_grid 4 3 6
"""
        opt_obj.value = None
        self._options['kpoints_mp_grid'] = opt_obj

        self.__dict__['kpoints_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoints_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-point density of a Monkhorst-Pack grid.  Units of inverse length should be specified.
Example:
kpoints_mp_spacing 0.05 1/ang
"""
        opt_obj.value = None
        self._options['kpoints_mp_spacing'] = opt_obj

        self.__dict__['kpoints_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoints_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the origin of the Monkhorst-Pack set in fractional coordinates.
Example:
kpoints_mp_offset 0.125 0.0 0.5
"""
        opt_obj.value = None
        self._options['kpoints_mp_offset'] = opt_obj

        self.__dict__['kpoints_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from KPOINTS_LIST
"""
        opt_obj.value = None
        self._options['kpoint_list'] = opt_obj

        self.__dict__['kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from KPOINTS_MP_GRID
"""
        opt_obj.value = None
        self._options['kpoint_mp_grid'] = opt_obj

        self.__dict__['kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from KPOINTS_MP_SPACING
"""
        opt_obj.value = None
        self._options['kpoint_mp_spacing'] = opt_obj

        self.__dict__['kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from KPOINTS_MP_OFFSET
"""
        opt_obj.value = None
        self._options['kpoint_mp_offset'] = opt_obj

        self.__dict__['kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoint_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The continuous path through the BZ on which the band structure is calculated.  This is specified in fractional coordinates.
Example:
%block bs_kpoint_path
0.37500000   0.37500000   0.75000000
0.50000000   0.50000000   0.50000000
0.50000000   0.00000000   0.50000000
0.00000000   0.00000000   0.00000000
0.37500000   0.37500000   0.75000000
0.50000000   0.50000000   0.50000000
0.00000000   0.00000000   0.00000000
%endblock bs_kpoint_path
"""
        opt_obj.value = None
        self._options['bs_kpoint_path'] = opt_obj

        self.__dict__['bs_kpoint_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoint_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The maximum spacing between current_cell%kpoints along the path specified by BS_KPOINT_PATH.  Units of inverse length must be specified.  Default value: 0.1 1/ang
"""
        opt_obj.value = None
        self._options['bs_kpoint_path_spacing'] = opt_obj

        self.__dict__['bs_kpoint_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of discrete k-points at which the band structure will be calculated  Default value: SCF k-points are used if BS_KPOINT_* k-point specifier is not given.
"""
        opt_obj.value = None
        self._options['bs_kpoint_list'] = opt_obj

        self.__dict__['bs_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-points defined by a Monkhorst-Pack grid for a band stucture calculation.  This is mainly used for density of states calculations.  Default value: Determined from BS_KPOINT_SPACING.
"""
        opt_obj.value = None
        self._options['bs_kpoint_mp_grid'] = opt_obj

        self.__dict__['bs_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-point density of a Monkhorst-Pack grid used in a band structure calculation.  Units of inverse distance must be specified.  Default value: 0.1 1/ang.
"""
        opt_obj.value = None
        self._options['bs_kpoint_mp_spacing'] = opt_obj

        self.__dict__['bs_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the origin of the Monkhorst-Pack set for a  Band structrure (density of states) calculation.  This is specified in fractional coordinates.  Default value: (0, 0, 0)
"""
        opt_obj.value = None
        self._options['bs_kpoint_mp_offset'] = opt_obj

        self.__dict__['bs_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoints_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from BS_KPOINT_PATH
"""
        opt_obj.value = None
        self._options['bs_kpoints_path'] = opt_obj

        self.__dict__['bs_kpoints_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoints_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from BS_KPOINT_PATH_SPACING
"""
        opt_obj.value = None
        self._options['bs_kpoints_path_spacing'] = opt_obj

        self.__dict__['bs_kpoints_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoints_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from BS_KPOINT_LIST
"""
        opt_obj.value = None
        self._options['bs_kpoints_list'] = opt_obj

        self.__dict__['bs_kpoints_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoints_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from BS_KPOINT_MP_GRID
"""
        opt_obj.value = None
        self._options['bs_kpoints_mp_grid'] = opt_obj

        self.__dict__['bs_kpoints_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoints_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from BS_KPOINT_MP_SPACING
"""
        opt_obj.value = None
        self._options['bs_kpoints_mp_spacing'] = opt_obj

        self.__dict__['bs_kpoints_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_kpoints_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from BS_KPOINT_MP_OFFSET
"""
        opt_obj.value = None
        self._options['bs_kpoints_mp_offset'] = opt_obj

        self.__dict__['bs_kpoints_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_supercell_matrix'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The supercelling matrix for force constant matrix calculations. The supercell matrix is specified by a 3x3 integer matrix which gives the supercell used in finite-difference phonon calculations.
"""
        opt_obj.value = None
        self._options['phonon_supercell_matrix'] = opt_obj

        self.__dict__['phonon_supercell_matrix'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoint_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The path continuous through the BZ on which phonon dispersion is calculated.  This is specified in fractional coordinates.  Default value: None.
"""
        opt_obj.value = None
        self._options['phonon_kpoint_path'] = opt_obj

        self.__dict__['phonon_kpoint_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoint_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The maximum spacing between current_cell%kpoints along the path specified by PHONON_KPOINT_PATH.  Units of inverse length must be specified.  Default value: 0.1 1/ang.
"""
        opt_obj.value = None
        self._options['phonon_kpoint_path_spacing'] = opt_obj

        self.__dict__['phonon_kpoint_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of discrete k-points at which phonon frequencies and eigenvectors will be calculated.  Default value: SCF k-points are used if an alternative PHONON_KPOINT_* specifier is not given.
"""
        opt_obj.value = None
        self._options['phonon_kpoint_list'] = opt_obj

        self.__dict__['phonon_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The phonon wavevectors defined by a Monkhorst-Pack grid.  Symmetry (if specified) will be used to generate the wavevector list and weights.
"""
        opt_obj.value = None
        self._options['phonon_kpoint_mp_grid'] = opt_obj

        self.__dict__['phonon_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the origin of the Monkhorst-Pack set for phonons in fractional coordinates  Default value: (0, 0, 0).
"""
        opt_obj.value = None
        self._options['phonon_kpoint_mp_offset'] = opt_obj

        self.__dict__['phonon_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The density of wavevectors on a a Monkhorst-Pack grid for phonon calculations.  Units of inverse length should be specified.  Default value: 0.1 1/ang.
"""
        opt_obj.value = None
        self._options['phonon_kpoint_mp_spacing'] = opt_obj

        self.__dict__['phonon_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_gamma_directions'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """This is a list of directions along which q->0 will be calculated for the  non-analytic LO/TO term in a phonon calculation at q=0.  Fractional coordinates must be used.  Default value: The k-point before gamma in the k-point list, or the one after or (0.1, 0, 0)
"""
        opt_obj.value = None
        self._options['phonon_gamma_directions'] = opt_obj

        self.__dict__['phonon_gamma_directions'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoints_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from PHONON_KPOINT_PATH
"""
        opt_obj.value = None
        self._options['phonon_kpoints_path'] = opt_obj

        self.__dict__['phonon_kpoints_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoints_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from PHONON_KPOINT_PATH_SPACING
"""
        opt_obj.value = None
        self._options['phonon_kpoints_path_spacing'] = opt_obj

        self.__dict__['phonon_kpoints_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_kpoints_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from PHONON_KPOINT_LIST
"""
        opt_obj.value = None
        self._options['phonon_kpoints_list'] = opt_obj

        self.__dict__['phonon_kpoints_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Phonon frequencies are calculated on a coarse set of wavevectors using DFPT and interpolated onto this finer list of points.
"""
        opt_obj.value = None
        self._options['phonon_fine_kpoint_list'] = opt_obj

        self.__dict__['phonon_fine_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_kpoint_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Phonon frequencies are calculated on a coarse set of wavevectors using DFPT and interpolated onto this finer path.
"""
        opt_obj.value = None
        self._options['phonon_fine_kpoint_path'] = opt_obj

        self.__dict__['phonon_fine_kpoint_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_kpoint_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The spacing of k-points along a path (specified by PHONON_FINE_KPOINT_PATH) at which phonons will be interpolated from a coarser grid
"""
        opt_obj.value = None
        self._options['phonon_fine_kpoint_path_spacing'] = opt_obj

        self.__dict__['phonon_fine_kpoint_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Phonon frequencies are calculated on a coarse set of wavevectors using DFPT and interpolated onto this finer grid of wavevectors.
"""
        opt_obj.value = None
        self._options['phonon_fine_kpoint_mp_grid'] = opt_obj

        self.__dict__['phonon_fine_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """This specifies the miminum spacing bewteen points on a Monkhorst-Pack grid that phonons will be interpolated onto from the coarser phonon grid.
"""
        opt_obj.value = None
        self._options['phonon_fine_kpoint_mp_spacing'] = opt_obj

        self.__dict__['phonon_fine_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the fine MP grid at which the phonons calculated using DFPT are interpolated.
"""
        opt_obj.value = None
        self._options['phonon_fine_kpoint_mp_offset'] = opt_obj

        self.__dict__['phonon_fine_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoints_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of k-points in the brillouin zone with weights used  for calculating optical properties of the system.  Fractional coordinates must be used for the k-points and the weights must sum to 1  Default value: SCF k-points
"""
        opt_obj.value = None
        self._options['optics_kpoints_list'] = opt_obj

        self.__dict__['optics_kpoints_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoints_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-points defined by a Monkhorst-Pack grid used for calculating optical properties. Fractional coordinates must be used for the k-points and the weights must sum to 1  Default value: None
"""
        opt_obj.value = None
        self._options['optics_kpoints_mp_grid'] = opt_obj

        self.__dict__['optics_kpoints_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoints_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-point density of a Monkhorst-Pack grid used when calculating optical properties.  Units of inverse length must be specified.  Default value: 0.1 1/ang
"""
        opt_obj.value = None
        self._options['optics_kpoints_mp_spacing'] = opt_obj

        self.__dict__['optics_kpoints_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoints_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the origin of the Monkhorst-Pack set when calculating optical properties.  This is specified in fractional coordinates.  Default value: (0, 0, 0)
"""
        opt_obj.value = None
        self._options['optics_kpoints_mp_offset'] = opt_obj

        self.__dict__['optics_kpoints_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from OPTICS_KPOINTS_LIST
"""
        opt_obj.value = None
        self._options['optics_kpoint_list'] = opt_obj

        self.__dict__['optics_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from OPTICS_KPOINTS_MP_GRID
"""
        opt_obj.value = None
        self._options['optics_kpoint_mp_grid'] = opt_obj

        self.__dict__['optics_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from OPTICS_KPOINTS_MP_SPACING
"""
        opt_obj.value = None
        self._options['optics_kpoint_mp_spacing'] = opt_obj

        self.__dict__['optics_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from OPTICS_KPOINTS_MP_OFFSET
"""
        opt_obj.value = None
        self._options['optics_kpoint_mp_offset'] = opt_obj

        self.__dict__['optics_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-points at which the magnetic resonance calculations will be performed.
"""
        opt_obj.value = None
        self._options['magres_kpoint_list'] = opt_obj

        self.__dict__['magres_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_kpoint_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A path defining the k-points at which magnetic resonance calculations will be performed.
"""
        opt_obj.value = None
        self._options['magres_kpoint_path'] = opt_obj

        self.__dict__['magres_kpoint_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_kpoint_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The spacing between points on the k-point path used for magnetic resonance calculations.
"""
        opt_obj.value = None
        self._options['magres_kpoint_path_spacing'] = opt_obj

        self.__dict__['magres_kpoint_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The grid defining the Monkhorst-Pack set of k-points at which the magnetic resonance calculations will be performed.
"""
        opt_obj.value = None
        self._options['magres_kpoint_mp_grid'] = opt_obj

        self.__dict__['magres_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """This specifies the miminum spacing bewteen points on a Monkhorst-Pack grid that magnetic resonance properties will be calculated with.
"""
        opt_obj.value = None
        self._options['magres_kpoint_mp_spacing'] = opt_obj

        self.__dict__['magres_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the Monkhorst-Pack grid that magnetic resonance properties are calculated.
"""
        opt_obj.value = None
        self._options['magres_kpoint_mp_offset'] = opt_obj

        self.__dict__['magres_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'positions_frac_product'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The species and positions of the atoms, in fractional coordinates,  for the transition state product.  Default value: The initial atomic positions.
"""
        opt_obj.value = None
        self._options['positions_frac_product'] = opt_obj

        self.__dict__['positions_frac_product'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'positions_abs_product'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The species and positions of the atoms, in absolute coordinates,  for the transition state product.  Optionally, units of length may be specified.  Default value: The initial atomic positions.
"""
        opt_obj.value = None
        self._options['positions_abs_product'] = opt_obj

        self.__dict__['positions_abs_product'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'positions_frac_intermediate'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The positions of the atoms, in fractional coordinates,  for the intermediate transition state product.  Default value: The initial atomic positions.
"""
        opt_obj.value = None
        self._options['positions_frac_intermediate'] = opt_obj

        self.__dict__['positions_frac_intermediate'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'positions_abs_intermediate'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The positions of the atoms, in absolute coordinates,  for the intermediate transition state product.  Optionally, units of length may be specified.  Default value: The initial atomic positions.
"""
        opt_obj.value = None
        self._options['positions_abs_intermediate'] = opt_obj

        self.__dict__['positions_abs_intermediate'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fix_vol'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If keyword is present, the volume of the cell will remain fixed  although cell angles and cell lengths may still be varied.  Default value: False, unless FIX_VOL is specified.
"""
        opt_obj.value = None
        self._options['fix_vol'] = opt_obj

        self.__dict__['fix_vol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'species_gamma'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The gyromagnetic radius for each  atomic species
"""
        opt_obj.value = None
        self._options['species_gamma'] = opt_obj

        self.__dict__['species_gamma'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'species_q'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The nuclear electric quadrupole moment for each  atomic species
"""
        opt_obj.value = None
        self._options['species_q'] = opt_obj

        self.__dict__['species_q'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoints_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of k-points in the brillouin zone (with associated weights)  used for BZ integration during a supercell FD phonon calculation.  The k-point weights must sum to 1.  Default value: Generated from SUPERCELL_KPOINTS_MP_SPACING and the crystal symmetry.
"""
        opt_obj.value = None
        self._options['supercell_kpoints_list'] = opt_obj

        self.__dict__['supercell_kpoints_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoints_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-points defined by a Monkhorst-Pack grid when doing a finite displacement phonon calculation.  Symmetry (if specified) will be used to generate the k-point list and weights.  Default value: Generated from SUPERCELL_KPOINTS_MP_SPACING.
"""
        opt_obj.value = None
        self._options['supercell_kpoints_mp_grid'] = opt_obj

        self.__dict__['supercell_kpoints_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoints_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-point density of a Monkhorst-Pack grid for a supercell FD phonon calculation.  Units of inverse length should be specified.  Default value: 0.1 1/ang.
"""
        opt_obj.value = None
        self._options['supercell_kpoints_mp_spacing'] = opt_obj

        self.__dict__['supercell_kpoints_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoints_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the origin of the Monkhorst-Pack set in fractional coordinates  when performing a finite displacement phonon calculation.  Default value: (0, 0, 0).
"""
        opt_obj.value = None
        self._options['supercell_kpoints_mp_offset'] = opt_obj

        self.__dict__['supercell_kpoints_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SUPERCELL_KPOINTS_LIST
"""
        opt_obj.value = None
        self._options['supercell_kpoint_list'] = opt_obj

        self.__dict__['supercell_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SUPERCELL_KPOINTS_MP_GRID
"""
        opt_obj.value = None
        self._options['supercell_kpoint_mp_grid'] = opt_obj

        self.__dict__['supercell_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SUPERCELL_KPOINTS_MP_SPACING
"""
        opt_obj.value = None
        self._options['supercell_kpoint_mp_spacing'] = opt_obj

        self.__dict__['supercell_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SUPERCELL_KPOINTS_MP_OFFSET
"""
        opt_obj.value = None
        self._options['supercell_kpoint_mp_offset'] = opt_obj

        self.__dict__['supercell_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'supercell_matrix'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The supercell matrix for multiplying up the supplied unit cell. The supercell matrix is specified by a 3x3 integer matrix which  gives the supercell used in the calculation.
Example:
%block supercell_matrix
2 0 0
0 3 0
0 0 2
%endblock supercell_matrix
"""
        opt_obj.value = None
        self._options['supercell_matrix'] = opt_obj

        self.__dict__['supercell_matrix'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nonlinear_constraints'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of the constraints on the motion of the ions  during relaxation.  Default value: None.
"""
        opt_obj.value = None
        self._options['nonlinear_constraints'] = opt_obj

        self.__dict__['nonlinear_constraints'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'external_efield'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The electric field vector applied to the cell during the SCF, molecular dynamics  and geometry optimisation. Optionally, units of appied electric field  may also be given.  Default value: 0.0 eV
"""
        opt_obj.value = None
        self._options['external_efield'] = opt_obj

        self.__dict__['external_efield'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'positions_noise'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The maximum amount of random noise that will be added onto all of the  atomic positions in the unit cell. It is symmetry and constraints conserving.  Default value: 0.0 Angstroms
"""
        opt_obj.value = None
        self._options['positions_noise'] = opt_obj

        self.__dict__['positions_noise'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'cell_noise'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The maximum amount of random noise that will be added onto all of the  unit cell parameters. It is symmetry and constraints conserving.  Default value: 0.0 Angstroms
"""
        opt_obj.value = None
        self._options['cell_noise'] = opt_obj

        self.__dict__['cell_noise'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'hubbard_u'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The Hubbard U is used in DFT+U calculations. Default value for all orbitals on all species is zero.
"""
        opt_obj.value = None
        self._options['hubbard_u'] = opt_obj

        self.__dict__['hubbard_u'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'hubbard_alpha'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Used in determining the Hubbard U for DFT+U calculations. Default value for all orbitals on all species is zero.
"""
        opt_obj.value = None
        self._options['hubbard_alpha'] = opt_obj

        self.__dict__['hubbard_alpha'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'atomic_init'
        opt_obj.type = 'Defined'
        opt_obj.level = 'Dummy'
        opt_obj.__doc__ = """No action
"""
        opt_obj.value = None
        self._options['atomic_init'] = opt_obj

        self.__dict__['atomic_init'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'quantisation_axis'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: along c vector
"""
        opt_obj.value = None
        self._options['quantisation_axis'] = opt_obj

        self.__dict__['quantisation_axis'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'quantization_axis'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: along c vector
"""
        opt_obj.value = None
        self._options['quantization_axis'] = opt_obj

        self.__dict__['quantization_axis'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'jcoupling_site'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: No default value
"""
        opt_obj.value = None
        self._options['jcoupling_site'] = opt_obj

        self.__dict__['jcoupling_site'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'chemical_potential'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The chemical potential used in free energy calculations. Default value for each species is zero.
"""
        opt_obj.value = None
        self._options['chemical_potential'] = opt_obj

        self.__dict__['chemical_potential'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-points at which ELNES (core level spectroscopy) calculations will be performed.
"""
        opt_obj.value = None
        self._options['elnes_kpoint_list'] = opt_obj

        self.__dict__['elnes_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The grid defining the Monkhorst-Pack set of k-points at which the ELNES (core level spectroscopy) calculations will be performed.
"""
        opt_obj.value = None
        self._options['elnes_kpoint_mp_grid'] = opt_obj

        self.__dict__['elnes_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """This specifies the miminum spacing bewteen points on a Monkhorst-Pack grid that ELNES (core level spectroscopy) properties will be calculated with.
"""
        opt_obj.value = None
        self._options['elnes_kpoint_mp_spacing'] = opt_obj

        self.__dict__['elnes_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the Monkhorst-Pack grid that ELNES (core level spectroscopy) properties are calculated.
"""
        opt_obj.value = None
        self._options['elnes_kpoint_mp_offset'] = opt_obj

        self.__dict__['elnes_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'snap_to_symmetry'
        opt_obj.type = 'Defined'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If SNAP_TO_SYMMETRY keyword is present then, given the symmetry  operations supplied or generated in cell, the ionic positions and   lattice parameters are forced to obey the symmetries (to machine precision).   Example:
snap_to_symmetry
"""
        opt_obj.value = None
        self._options['snap_to_symmetry'] = opt_obj

        self.__dict__['snap_to_symmetry'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoint_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The continuous path through the BZ on which the spectral properties are calculated.  This is specified in fractional coordinates.  Default value: None
"""
        opt_obj.value = None
        self._options['spectral_kpoint_path'] = opt_obj

        self.__dict__['spectral_kpoint_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoint_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The maximum spacing between current_cell%kpoints along the path specified by SPECTRAL_KPOINT_PATH.  Units of inverse length must be specified.  Default value: 0.1 1/ang
"""
        opt_obj.value = None
        self._options['spectral_kpoint_path_spacing'] = opt_obj

        self.__dict__['spectral_kpoint_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoint_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A list of discrete k-points at which the spectral properties will be calculated  Default value: SCF k-points are used if SPECTRAL_KPOINT_* k-point specifier is not given.
"""
        opt_obj.value = None
        self._options['spectral_kpoint_list'] = opt_obj

        self.__dict__['spectral_kpoint_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoint_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-points defined by a Monkhorst-Pack grid for a band stucture calculation.  This is mainly used for density of states calculations.  Default value: Determined from SPECTRAL_KPOINT_SPACING.
"""
        opt_obj.value = None
        self._options['spectral_kpoint_mp_grid'] = opt_obj

        self.__dict__['spectral_kpoint_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoint_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The k-point density of a Monkhorst-Pack grid used in a band structure calculation.  Units of inverse distance must be specified.  Default value: 0.1 1/ang.
"""
        opt_obj.value = None
        self._options['spectral_kpoint_mp_spacing'] = opt_obj

        self.__dict__['spectral_kpoint_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoint_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The offset of the origin of the Monkhorst-Pack set for a  Band structrure (density of states) calculation.  This is specified in fractional coordinates.  Default value: (0, 0, 0)
"""
        opt_obj.value = None
        self._options['spectral_kpoint_mp_offset'] = opt_obj

        self.__dict__['spectral_kpoint_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoints_path'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SPECTRAL_KPOINT_PATH
"""
        opt_obj.value = None
        self._options['spectral_kpoints_path'] = opt_obj

        self.__dict__['spectral_kpoints_path'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoints_path_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SPECTRAL_KPOINT_PATH_SPACING
"""
        opt_obj.value = None
        self._options['spectral_kpoints_path_spacing'] = opt_obj

        self.__dict__['spectral_kpoints_path_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoints_list'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SPECTRAL_KPOINT_LIST
"""
        opt_obj.value = None
        self._options['spectral_kpoints_list'] = opt_obj

        self.__dict__['spectral_kpoints_list'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoints_mp_grid'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SPECTRAL_KPOINT_MP_GRID
"""
        opt_obj.value = None
        self._options['spectral_kpoints_mp_grid'] = opt_obj

        self.__dict__['spectral_kpoints_mp_grid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoints_mp_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SPECTRAL_KPOINT_MP_SPACING
"""
        opt_obj.value = None
        self._options['spectral_kpoints_mp_spacing'] = opt_obj

        self.__dict__['spectral_kpoints_mp_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_kpoints_mp_offset'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Default value: Determined from SPECTRAL_KPOINT_MP_OFFSET
"""
        opt_obj.value = None
        self._options['spectral_kpoints_mp_offset'] = opt_obj

        self.__dict__['spectral_kpoints_mp_offset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_custom_params'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """used to calculate van der Waals forces. Default value for each species  is determined by the chosen semiempirical correction scheme.
"""
        opt_obj.value = None
        self._options['sedc_custom_params'] = opt_obj

        self.__dict__['sedc_custom_params'] = opt_obj



class CastepParamDict(object):
    """A flat object that holds param options"""
    def __init__(self):
        object.__init__(self)
        self._options = ComparableDict()
        opt_obj = Opt()
        opt_obj.keyword = 'comment'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A current_params%comment string that may be used to label the output.
Modifiable: restart and on the fly
Allowed values: up to 80 characters
Default value : (empty)
"""
        opt_obj.value = None
        self._options['comment'] = opt_obj

        self.__dict__['comment'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'iprint'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Controls the amount of detail in the output.
Modifiable: restart and on the fly
Allowed values: 1, 2, 3
Default value : 1
"""
        opt_obj.value = None
        self._options['iprint'] = opt_obj

        self.__dict__['iprint'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'continuation'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The name of file to read current_params%continuation data from, NULL if not a current_params%continuation run.
NB A run cannot be both current_params%reuse and current_params%continuation.
A current_params%continuation run restarts the current calculation from the end of the
previous one. As such, only a limited subset of all parameters may be
changed wrt the previous one.
Modifiable: restart only
Allowed values: up to 255 character filename
Default value : NULL
"""
        opt_obj.value = None
        self._options['continuation'] = opt_obj

        self.__dict__['continuation'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'reuse'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The name of file to read current_params%reuse data from, NULL if not a current_params%reuse run.
NB A run cannot be both current_params%reuse and current_params%continuation.
A current_params%reuse run is essentially a new calculation that tries to current_params%reuse as      much as possible from an earlier calculation.
Modifiable: restart only
Allowed values: up to 255 character filename
Default value : NULL
"""
        opt_obj.value = None
        self._options['reuse'] = opt_obj

        self.__dict__['reuse'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'checkpoint'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The name of file to write current_params%checkpoint (current_params%continuation data) to.
Modifiable: restart and on the fly
Allowed values: up to 255 character filename
Default value : <seedname>.check
"""
        opt_obj.value = None
        self._options['checkpoint'] = opt_obj

        self.__dict__['checkpoint'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'task'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Defines the type of calculation to be performed.
Modifiable: restart only
Allowed values: SINGLEPOINT, BANDSTRUCTURE, GEOMETRYOPTIMIZATION,  MOLECULARDYNAMICS, OPTICS, TRANSITIONSTATESEARCH, PHONON, EFIELD,  PHONON+EFIELD, THERMODYNAMICS, WANNIER, MAGRES, ELNES, SPECTRAL, GENETICALGOR
Default value : SINGLEPOINT
"""
        opt_obj.value = None
        self._options['task'] = opt_obj

        self.__dict__['task'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calculate_stress'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to perform a stress calculation.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['calculate_stress'] = opt_obj

        self.__dict__['calculate_stress'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calculate_densdiff'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to generate charge density difference based   on the linear combination of atomic densities.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['calculate_densdiff'] = opt_obj

        self.__dict__['calculate_densdiff'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calculate_elf'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to perform an electron localisation function (ELF)  calculation.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['calculate_elf'] = opt_obj

        self.__dict__['calculate_elf'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calculate_hirshfeld'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to perform a Hirshfeld analysis of the charge density.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['calculate_hirshfeld'] = opt_obj

        self.__dict__['calculate_hirshfeld'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'run_time'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies the maximum runtime for the job (in seconds) :
if less than or equal to zero then no time limit will be imposed.
Modifiable: restart and on the fly
Allowed values: (any)
Default value : 0
"""
        opt_obj.value = None
        self._options['run_time'] = opt_obj

        self.__dict__['run_time'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'backup_interval'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies the interval, in seconds, between backups of all data for restarts,  for a geometry optimization/molecular dynamics/phonon run - if less than or  equal to zero then no timed backups.
Modifiable: restart and on the fly
Allowed values: (any)
Default value : 0
"""
        opt_obj.value = None
        self._options['backup_interval'] = opt_obj

        self.__dict__['backup_interval'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'num_backup_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies the number of iterations between backups of all data for restarts,  for a geometry optimization or molecular dynamics run.
Modifiable: restart and on the fly
Allowed values: (any intger) > 0
Default value : 5
"""
        opt_obj.value = None
        self._options['num_backup_iter'] = opt_obj

        self.__dict__['num_backup_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'print_clock'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to print out timing information as the calculation  progresses.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['print_clock'] = opt_obj

        self.__dict__['print_clock'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'print_memory_usage'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to print out memory usage estimate.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['print_memory_usage'] = opt_obj

        self.__dict__['print_memory_usage'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_formatted_potential'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write out final local potential to formatted file.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['write_formatted_potential'] = opt_obj

        self.__dict__['write_formatted_potential'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_formatted_density'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write out final electron density to formatted file.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['write_formatted_density'] = opt_obj

        self.__dict__['write_formatted_density'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_formatted_elf'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If CALCULATE_ELF is TRUE then ELF is always written out to unformatted file.
Specifies whether or not to write out ELF to formatted file in addition.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['write_formatted_elf'] = opt_obj

        self.__dict__['write_formatted_elf'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_orbitals'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write an extra checkfile containing orbitals in a  band structure run.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE unless TASK=BANDSTRUCTURE
"""
        opt_obj.value = None
        self._options['write_orbitals'] = opt_obj

        self.__dict__['write_orbitals'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_cif_structure'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write the final structure in a CIF file format.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['write_cif_structure'] = opt_obj

        self.__dict__['write_cif_structure'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_cell_structure'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write the final structure in a CELL file format.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['write_cell_structure'] = opt_obj

        self.__dict__['write_cell_structure'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_bib'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write a list of references used in this particular
run in BibTeX format.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['write_bib'] = opt_obj

        self.__dict__['write_bib'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_otfg'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write out the set of On The Fly Generated pseudopotential files for this run.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['write_otfg'] = opt_obj

        self.__dict__['write_otfg'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calc_molecular_dipole'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to calculate electric dipole moment,  treating whole system as isolated molecule.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['calc_molecular_dipole'] = opt_obj

        self.__dict__['calc_molecular_dipole'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'write_checkpoint'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write both check and castep_bin files, and
(optionally) fine control on what to write for periodic backup, failure or success.
Modifiable: restart and on the fly
Allowed values: NONE, MINIMAL, ALL (or BOTH or FULL), with optional SUCCESS= FAILURE= BACKUP= options.
Default value : ALL
"""
        opt_obj.value = None
        self._options['write_checkpoint'] = opt_obj

        self.__dict__['write_checkpoint'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'cml_output'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write additional CML output to <seedname>-<current_params%task>.cml  (Requires compile-time support)
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['cml_output'] = opt_obj

        self.__dict__['cml_output'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'cml_filename'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Withdrawn. CML output filename is now determined automatically from SEEDNAME if CML_OUTPUT is TRUE.
"""
        opt_obj.value = None
        self._options['cml_filename'] = opt_obj

        self.__dict__['cml_filename'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'length_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all lengths in output - many different units  are supported.
Modifiable: restart and on the fly
Default value : ANG
"""
        opt_obj.value = None
        self._options['length_unit'] = opt_obj

        self.__dict__['length_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mass_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all masses in output - many different units  are supported.
Modifiable: restart and on the fly
Default value : AMU
"""
        opt_obj.value = None
        self._options['mass_unit'] = opt_obj

        self.__dict__['mass_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'time_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all times in output - many different units are  supported.
Modifiable: restart and on the fly
Default value : PS
"""
        opt_obj.value = None
        self._options['time_unit'] = opt_obj

        self.__dict__['time_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'charge_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all charges in output.
Modifiable: restart and on the fly
Allowed values: E, C
Default value : E
"""
        opt_obj.value = None
        self._options['charge_unit'] = opt_obj

        self.__dict__['charge_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spin_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all spins in output.
Modifiable: restart and on the fly
Allowed values: HBAR/2, HBAR, MAGNETON (or muB)
Default value : HBAR/2
"""
        opt_obj.value = None
        self._options['spin_unit'] = opt_obj

        self.__dict__['spin_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'energy_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all energies in output - many different units are  supported.
Modifiable: restart and on the fly
Default value : EV
"""
        opt_obj.value = None
        self._options['energy_unit'] = opt_obj

        self.__dict__['energy_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'force_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all forces in output - many different units are  supported.
Modifiable: restart and on the fly
Default value : EV/ANG
"""
        opt_obj.value = None
        self._options['force_unit'] = opt_obj

        self.__dict__['force_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'velocity_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all velocities in output - many different units  are supported.
Modifiable: restart and on the fly
Default value : ANG/PS
"""
        opt_obj.value = None
        self._options['velocity_unit'] = opt_obj

        self.__dict__['velocity_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'pressure_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all pressures in output - many different units  are supported.
Modifiable: restart and on the fly
Default value :  GPA
"""
        opt_obj.value = None
        self._options['pressure_unit'] = opt_obj

        self.__dict__['pressure_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'inv_length_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all inverse lengths in output - many different  units are supported.
Modifiable: restart and on the fly
Default value : 1/ANG
"""
        opt_obj.value = None
        self._options['inv_length_unit'] = opt_obj

        self.__dict__['inv_length_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'frequency_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all frequencies in output - many different units  are supported.
Modifiable: restart and on the fly
Default value : CM-1
"""
        opt_obj.value = None
        self._options['frequency_unit'] = opt_obj

        self.__dict__['frequency_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'force_constant_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all force constants in output - many different  units are supported.
Modifiable: restart and on the fly
Default value : EV/ANG**2
"""
        opt_obj.value = None
        self._options['force_constant_unit'] = opt_obj

        self.__dict__['force_constant_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'volume_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all volumes in output - many different units are  supported.
Modifiable: restart and on the fly
Default value : ANG**3
"""
        opt_obj.value = None
        self._options['volume_unit'] = opt_obj

        self.__dict__['volume_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ir_intensity_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all IR intensities in output - many different  units are supported.
Modifiable: restart and on the fly
Default value : DEBYE**2/ANG**2/AMU
"""
        opt_obj.value = None
        self._options['ir_intensity_unit'] = opt_obj

        self.__dict__['ir_intensity_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'dipole_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all electric dipole moments in output - many  different units are supported.
Modifiable: restart and on the fly
Default value : DEBYE
"""
        opt_obj.value = None
        self._options['dipole_unit'] = opt_obj

        self.__dict__['dipole_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all electric field in output - many different  units are supported.
Modifiable: restart and on the fly
Default value : EV/ANG/E
"""
        opt_obj.value = None
        self._options['efield_unit'] = opt_obj

        self.__dict__['efield_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'entropy_unit'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the units used for all entropy in output - many different  units are supported.
Modifiable: restart and on the fly
Default value : J/MOL/K
"""
        opt_obj.value = None
        self._options['entropy_unit'] = opt_obj

        self.__dict__['entropy_unit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'page_wvfns'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the paging of wavefunctions to disk.
If >0, then all wavefunctions  greater than given size (in MB) will be paged to disk.
If =0, then no paging will be done.
If <0, then all wavefunctions, regardless of size, will be paged to disk.
Modifiable: restart only
Allowed values: (any integer)
Default value : 0
"""
        opt_obj.value = None
        self._options['page_wvfns'] = opt_obj

        self.__dict__['page_wvfns'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'rand_seed'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Controls the random initialization of wavefunctions and other things.
If =0, then the random number sequence will not be repeatable.
If <>0, then this will become the random number generator seed, for repeatable random number sequences.
Modifiable: restart only
Allowed values: (any integer)
Default value : 0
"""
        opt_obj.value = None
        self._options['rand_seed'] = opt_obj

        self.__dict__['rand_seed'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'data_distribution'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the data distribution used.
Modifiable: restart only
Allowed values: DEFAULT, KPOINT, GVECTOR, BAND, MIXED
Default value : DEFAULT
"""
        opt_obj.value = None
        self._options['data_distribution'] = opt_obj

        self.__dict__['data_distribution'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'opt_strategy'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the optimization strategy used.
Modifiable: restart only
Allowed values: DEFAULT, SPEED, MEMORY
Default value : DEFAULT
"""
        opt_obj.value = None
        self._options['opt_strategy'] = opt_obj

        self.__dict__['opt_strategy'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'opt_strategy_bias'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the optimization strategy used:
+1,+2,+3 => increasing bias to speed optimisation;
0        => default optimisation;
-1,-2,-3 => increasing bias to memory minimisation.
Modifiable: restart only
Allowed values: -3 <= (integer) <= 3
Default value : 0
"""
        opt_obj.value = None
        self._options['opt_strategy_bias'] = opt_obj

        self.__dict__['opt_strategy_bias'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'num_farms'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies the number of current_params%task farms active in a PIMD or PHONON calculation.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : 1
"""
        opt_obj.value = None
        self._options['num_farms'] = opt_obj

        self.__dict__['num_farms'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'num_proc_in_smp'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies the maximum number of active processors per node in an SMP-aware  calculation.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : 1
"""
        opt_obj.value = None
        self._options['num_proc_in_smp'] = opt_obj

        self.__dict__['num_proc_in_smp'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'num_proc_in_smp_fine'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Specifies the maximum number of active processors per node for fine grid  in an SMP-aware calculation.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : NUM_PROC_IN_SMP
"""
        opt_obj.value = None
        self._options['num_proc_in_smp_fine'] = opt_obj

        self.__dict__['num_proc_in_smp_fine'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'message_size'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Specifies the minimum size (in 16 Byte units) of an alltoallv message.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : (hardware dependent)
"""
        opt_obj.value = None
        self._options['message_size'] = opt_obj

        self.__dict__['message_size'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'stop'
        opt_obj.type = 'Defined'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If defined, will cause the current run to be aborted as if the maximum runtime had been exceeded.
Only valid during re-read of input file.
"""
        opt_obj.value = None
        self._options['stop'] = opt_obj

        self.__dict__['stop'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'xc_functional'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential.
Modifiable: restart only
Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE03, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.
In addition, we now support libXC and all the additional functionals therein.
Default value : LDA
"""
        opt_obj.value = None
        self._options['xc_functional'] = opt_obj

        self.__dict__['xc_functional'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'xc_definition'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential.
This version is a BLOCK keyword, with the flexibility to allow an arbitrary
mixing of any of the basic XC_FUNCTIONAL components.
Basic format: a series of separate lines, each containing <func> <weight>
where <func> is the appropriate kernel for either eXchange or Correlation or both
and <weight> is supposed to add to 1.0 for both eXchange and Correlation.
Modifiable: restart only
Default value : LDA 1.0
"""
        opt_obj.value = None
        self._options['xc_definition'] = opt_obj

        self.__dict__['xc_definition'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'xc_vxc_deriv_epsilon'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """OBSOLETE: This keyword was once used in linear response with GGA  but a new algorithm is now used and this is redundant.
"""
        opt_obj.value = None
        self._options['xc_vxc_deriv_epsilon'] = opt_obj

        self.__dict__['xc_vxc_deriv_epsilon'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'relativistic_treatment'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects the method used to treat relativistic effects.
Implemented via the OTF pseudopotential generator so keyword
has no effect if using pseudopotentials read from file.
Modifiable: restart only
Allowed values: KOELLING-HARMON, SCHROEDINGER, ZORA
Default value : KOELLING-HARMON
"""
        opt_obj.value = None
        self._options['relativistic_treatment'] = opt_obj

        self.__dict__['relativistic_treatment'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_apply'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to apply any semi-empirical dispersion/van der Waals correction schemes.
Now optional - maintained in v8 onwards for backwards compatability reasons
- better to turn SEDC on/off using SEDC_SCHEME=NONE or TS etc.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['sedc_apply'] = opt_obj

        self.__dict__['sedc_apply'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_scheme'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The semi-empirical dispersion/van der Waals correction scheme to use.
Modifiable: restart and on the fly
Allowed values: NONE; OBS = Phys. Rev. B 73, 205101, (2006); G06 = J. Comput. Chem. 27, 1787, (2006);
JCHS = J. Comput. Chem. 28, 555, (2007); TS = Phys. Rev. Lett.,102, 073005 (2009);
TSsurf = Phys. Rev. Lett., 108, 146103 (2012);
(A)MBD and (A)TSSCS = Phys. Rev. Lett., 108, 236402 (2012);
(A)MBD* = J. Chem. Phys. 140, 18A508 (2014).
NB Not all XC_FUNCTIONAL values are supported for all schemes - if in doubt use PBE.
Default value : NONE (or TS if SEDC_APPLY=TRUE)
"""
        opt_obj.value = None
        self._options['sedc_scheme'] = opt_obj

        self.__dict__['sedc_scheme'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_sr_ts'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable SR value for the damping function in the TS  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_sr_ts'] = opt_obj

        self.__dict__['sedc_sr_ts'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_d_ts'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable d value for the damping function in the TS  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_d_ts'] = opt_obj

        self.__dict__['sedc_d_ts'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_s6_g06'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable S6 value for the damping function in the G06  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_s6_g06'] = opt_obj

        self.__dict__['sedc_s6_g06'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_d_g06'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable d value for the damping function in the G06  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_d_g06'] = opt_obj

        self.__dict__['sedc_d_g06'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_lambda_obs'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable lambda value for damping function in the the OBS  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_lambda_obs'] = opt_obj

        self.__dict__['sedc_lambda_obs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_n_obs'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable n value for the damping function in the OBS  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_n_obs'] = opt_obj

        self.__dict__['sedc_n_obs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_sr_jchs'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable SR value for the damping function in the JCHS  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_sr_jchs'] = opt_obj

        self.__dict__['sedc_sr_jchs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_s6_jchs'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable S6 value for the damping function in the JCHS  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_s6_jchs'] = opt_obj

        self.__dict__['sedc_s6_jchs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'sedc_d_jchs'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Customisable d value for the damping function in the JCHS  semi-empirical dispersion/van der Waals correction scheme.
Modifiable: restart and on the fly
Default is determined by XC_FUNCTIONAL.
"""
        opt_obj.value = None
        self._options['sedc_d_jchs'] = opt_obj

        self.__dict__['sedc_d_jchs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'page_ex_pot'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_PAGE_EX_POT instead.
"""
        opt_obj.value = None
        self._options['page_ex_pot'] = opt_obj

        self.__dict__['page_ex_pot'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_page_ex_pot'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Controls the paging of exchange potentials to disk.
If >0, then all exchange potentials  greater than given size (in MB) will be  paged to disk.
If =0, then no paging will be done.
If <0, then all exchange potentials, regardless of size, will be paged to disk.
Modifiable: restart only
Allowed values: (any integer)
Default value : 0
"""
        opt_obj.value = None
        self._options['nlxc_page_ex_pot'] = opt_obj

        self.__dict__['nlxc_page_ex_pot'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ppd_integral'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """NB This keyword has been removed.
"""
        opt_obj.value = None
        self._options['ppd_integral'] = opt_obj

        self.__dict__['ppd_integral'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_ppd_integral'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """NB This keyword has been removed.
"""
        opt_obj.value = None
        self._options['nlxc_ppd_integral'] = opt_obj

        self.__dict__['nlxc_ppd_integral'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ppd_size_x'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_PPD_SIZE_X instead.
"""
        opt_obj.value = None
        self._options['ppd_size_x'] = opt_obj

        self.__dict__['ppd_size_x'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_ppd_size_x'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of points in x-direction at which to sample parallelepiped  when performing ppd integration.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : 8
"""
        opt_obj.value = None
        self._options['nlxc_ppd_size_x'] = opt_obj

        self.__dict__['nlxc_ppd_size_x'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ppd_size_y'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_PPD_SIZE_Y instead.
"""
        opt_obj.value = None
        self._options['ppd_size_y'] = opt_obj

        self.__dict__['ppd_size_y'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_ppd_size_y'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of points in y-direction at which to sample parallelepiped  when performing ppd integration.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : 8
"""
        opt_obj.value = None
        self._options['nlxc_ppd_size_y'] = opt_obj

        self.__dict__['nlxc_ppd_size_y'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ppd_size_z'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_PPD_SIZE_Z instead.
"""
        opt_obj.value = None
        self._options['ppd_size_z'] = opt_obj

        self.__dict__['ppd_size_z'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_ppd_size_z'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of points in z-direction at which to sample parallelepiped  when performing ppd integration.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : 8
"""
        opt_obj.value = None
        self._options['nlxc_ppd_size_z'] = opt_obj

        self.__dict__['nlxc_ppd_size_z'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'impose_trs'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_IMPOSE_TRS instead.
"""
        opt_obj.value = None
        self._options['impose_trs'] = opt_obj

        self.__dict__['impose_trs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_impose_trs'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to impose time reversal symmetry on the Gamma point.
See also NLXC_EXCHANGE_REFLECT_KPTS.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['nlxc_impose_trs'] = opt_obj

        self.__dict__['nlxc_impose_trs'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'exchange_reflect_kpts'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_EXCHANGE_REFLECT_KPTS instead.
"""
        opt_obj.value = None
        self._options['exchange_reflect_kpts'] = opt_obj

        self.__dict__['exchange_reflect_kpts'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_exchange_reflect_kpts'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to assume that the wavefunction is time-reversal  symmetric - i.e. c(k+G)=c*(-k-G)
=>  only sum over one half of the Brillouin zone.
NB Not done for Gamma point as unnecessary and inefficient.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['nlxc_exchange_reflect_kpts'] = opt_obj

        self.__dict__['nlxc_exchange_reflect_kpts'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'k_scrn_den_function'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This keyword has been removed.
"""
        opt_obj.value = None
        self._options['k_scrn_den_function'] = opt_obj

        self.__dict__['k_scrn_den_function'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_k_scrn_den_function'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This keyword has been removed.
"""
        opt_obj.value = None
        self._options['nlxc_k_scrn_den_function'] = opt_obj

        self.__dict__['nlxc_k_scrn_den_function'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'k_scrn_averaging_scheme'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_K_SCRN_AVERAGING_SCHEME instead.
"""
        opt_obj.value = None
        self._options['k_scrn_averaging_scheme'] = opt_obj

        self.__dict__['k_scrn_averaging_scheme'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_k_scrn_averaging_scheme'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the averaging scheme to use for estimating the k-screening length.
Modifiable: restart only
Allowed values: HEG_DEN, AVE_DEN, SWA_DEN, SWA_ESX
Default value : HEG_DEN
"""
        opt_obj.value = None
        self._options['nlxc_k_scrn_averaging_scheme'] = opt_obj

        self.__dict__['nlxc_k_scrn_averaging_scheme'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 're_est_k_scrn'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_RE_EST_K_SCRN instead.
"""
        opt_obj.value = None
        self._options['re_est_k_scrn'] = opt_obj

        self.__dict__['re_est_k_scrn'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_re_est_k_scrn'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to update the estimate of the k-screening length  in Vxc as the density changes.
See also NLXC_K_SCRN_AVERAGING_SCHEME.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['nlxc_re_est_k_scrn'] = opt_obj

        self.__dict__['nlxc_re_est_k_scrn'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_exchange_screening'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """NB This keyword has been removed.
"""
        opt_obj.value = None
        self._options['nlxc_exchange_screening'] = opt_obj

        self.__dict__['nlxc_exchange_screening'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_exchange_fraction'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """NB This keyword has been removed.
"""
        opt_obj.value = None
        self._options['nlxc_exchange_fraction'] = opt_obj

        self.__dict__['nlxc_exchange_fraction'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calc_full_ex_pot'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use NLXC_CALC_FULL_EX_POT instead.
"""
        opt_obj.value = None
        self._options['calc_full_ex_pot'] = opt_obj

        self.__dict__['calc_full_ex_pot'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_calc_full_ex_pot'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines whether to calculate the full exchange potential matrix (avoids  copying) or to only calculate top half and then copy the conjugate onto the  bottom half. This copying may become inefficient when running in parallel  with bad latency, hence the switch.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['nlxc_calc_full_ex_pot'] = opt_obj

        self.__dict__['nlxc_calc_full_ex_pot'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_div_corr_on'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """NB This keyword has been removed.
"""
        opt_obj.value = None
        self._options['nlxc_div_corr_on'] = opt_obj

        self.__dict__['nlxc_div_corr_on'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_div_corr_s_width'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Width of the envelope function used to define the integrand for the  divergence correction.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 2.25
"""
        opt_obj.value = None
        self._options['nlxc_div_corr_s_width'] = opt_obj

        self.__dict__['nlxc_div_corr_s_width'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_div_corr_tol'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Tolerance within which the integral will be considered to have converged  when calculating the diverence correction.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 0.01
"""
        opt_obj.value = None
        self._options['nlxc_div_corr_tol'] = opt_obj

        self.__dict__['nlxc_div_corr_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nlxc_div_corr_npts_step'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Step in number of points used when testing convergence of the intergal for  the divergence correction.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : 6
"""
        opt_obj.value = None
        self._options['nlxc_div_corr_npts_step'] = opt_obj

        self.__dict__['nlxc_div_corr_npts_step'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'pspot_nonlocal_type'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specify the non-local pseudopotential representation.
Modifiable: never
Allowed values: REAL or RECIPROCAL
Default value : RECIPROCAL
"""
        opt_obj.value = None
        self._options['pspot_nonlocal_type'] = opt_obj

        self.__dict__['pspot_nonlocal_type'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'pspot_beta_phi_type'
        opt_obj.type = 'String'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Determines the representation of the <beta|phi> projectors.
Modifiable: never
Allowed values: REAL or RECIPROCAL
Default value : set to PSPOT_NONLOCAL_TYPE
"""
        opt_obj.value = None
        self._options['pspot_beta_phi_type'] = opt_obj

        self.__dict__['pspot_beta_phi_type'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spin_orbit_coupling'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines whether to use spin-orbit coupling or not.
Modifiable: never
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['spin_orbit_coupling'] = opt_obj

        self.__dict__['spin_orbit_coupling'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'basis_precision'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Controls the precision of the basis set by choosing the level of convergence  of atomic energies with this basis set and pseudopotential.  Will be used to  determine the value of CUT_OFF_ENERGY if not independently specified.
Modifiable: never
Allowed values: NULL, COARSE, MEDIUM, FINE, PRECISE, EXTREME
Default value : FINE
"""
        opt_obj.value = None
        self._options['basis_precision'] = opt_obj

        self.__dict__['basis_precision'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'cut_off_energy'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the cut-off energy for the plane wave basis set used.
Will override the BASIS_PRECISION value if also defined.
Modifiable: never
Allowed values: (any) > 0.0
Default value : set by BASIS_PRECISION=FINE
"""
        opt_obj.value = None
        self._options['cut_off_energy'] = opt_obj

        self.__dict__['cut_off_energy'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'grid_scale'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the size of the standard grid as a multiple of the diameter of  the cut-off sphere.
Modifiable: never
Allowed values: (any) > 0.0
Default value : 1.75
"""
        opt_obj.value = None
        self._options['grid_scale'] = opt_obj

        self.__dict__['grid_scale'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fine_grid_scale'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the size of the fine grid as a multiple of the diameter of the  cut-off sphere. By default, the fine grid will be the same as the standard grid.
Modifiable: never
Allowed values: (any) > 0.0
Default value : set to GRID_SCALE
"""
        opt_obj.value = None
        self._options['fine_grid_scale'] = opt_obj

        self.__dict__['fine_grid_scale'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fine_gmax'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Determines the maximum mod(g-vector) such that all g-vectors less than this  are included in the fine grid. By default, the fine grid will be the same  as the standard grid.
Modifiable: never
Allowed values: (any) > 0.0
Default value : set by GRID_SCALE
"""
        opt_obj.value = None
        self._options['fine_gmax'] = opt_obj

        self.__dict__['fine_gmax'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fft_max_prime_factor'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Specifies the largest prime factor to be used by the FFT algorithm when  determining the dimensions of the various grids. All FFT libraries supported  accept prime factors of 2,3 and 5. Some support more.
For maximum compatibility of check files between different systems you might want  to restrict FFT_MAX_PRIME_FACTOR=5 but for maximum efficiency you should use the  largest value supported by your FFT library.
Modifiable: never
Allowed values: 2 <= (any prime) <= 19 depending on FFT library
Default value : set by FFT library
"""
        opt_obj.value = None
        self._options['fft_max_prime_factor'] = opt_obj

        self.__dict__['fft_max_prime_factor'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fixed_npw'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines whether to use a fixed number of plane waves (fixed size basis) if  TRUE or use a fixed plane wave cutoff energy (fixed quality basis) if FALSE  when doing a variable cell calculation.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['fixed_npw'] = opt_obj

        self.__dict__['fixed_npw'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'finite_basis_corr'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines whether or not to correct energy and stress for finite basis set  when cell parameters change.
If =0 or NONE      then does no correction.
If =1 or MANUAL    then do manual correction using specified BASIS_DE_DLOGE.
If =2 or AUTOMATIC then do automatic correction using FINITE_BASIS_NPOINTS and FINITE_BASIS_SPACING.
Modifiable: restart only
Allowed values: 0, 1, 2 or NONE, MANUAL, AUTOMATIC
Default value : NONE unless CALCULATE_STRESS or TASK requires moving atoms
"""
        opt_obj.value = None
        self._options['finite_basis_corr'] = opt_obj

        self.__dict__['finite_basis_corr'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'basis_de_dloge'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Derivative of total energy w.r.t. natural log of basis cut-off energy.
Modifiable: restart only
Allowed values: (any)
Default value : 0.0
"""
        opt_obj.value = None
        self._options['basis_de_dloge'] = opt_obj

        self.__dict__['basis_de_dloge'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'finite_basis_npoints'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of points used to estimate BASIS_DE_DLOGE in automatic finite  basis set correction. Points will be chosen s.t. final calculation has cut-off  energy used in run.
Modifiable: restart only
Allowed values: (any integer) > 1
Default value : 3
"""
        opt_obj.value = None
        self._options['finite_basis_npoints'] = opt_obj

        self.__dict__['finite_basis_npoints'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'finite_basis_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the spacing of cut-off energies used to estimate BASIS_DE_DLOGE in  automatic finite basis set correction. Energies will be chosen s.t. final  calculation has cut-off energy used in run.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 5.0 eV
"""
        opt_obj.value = None
        self._options['finite_basis_spacing'] = opt_obj

        self.__dict__['finite_basis_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nelectrons'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Total number of electrons in the system.  Can also be determined by CHARGE, NUP and NDOWN.
Not restricted to integer values. Default is to make the system neutral.
Modifiable: never
Allowed values: (any) > 0.0
Default value : set by IONIC_CHARGE in cell file
"""
        opt_obj.value = None
        self._options['nelectrons'] = opt_obj

        self.__dict__['nelectrons'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'charge'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Net charge of the system.  Not restricted to integer values. Can be used instead of NELECTRONS.
Modifiable: never
Allowed values: (any)
Default value : 0.0
"""
        opt_obj.value = None
        self._options['charge'] = opt_obj

        self.__dict__['charge'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spin'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The total z-component of the electronic spin of the system.  Can also be determined by NUP and NDOWN.
Modifiable: never
Allowed values: (any)
Default value : 0.0
"""
        opt_obj.value = None
        self._options['spin'] = opt_obj

        self.__dict__['spin'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nup'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The total number of up-spin electrons.  Can also be determined by CHARGE and SPIN.
Modifiable: never
Allowed values: (any) >= 0.0
Default value : NELECTRONS/2
"""
        opt_obj.value = None
        self._options['nup'] = opt_obj

        self.__dict__['nup'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ndown'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The total number of down-spin electrons.  Can also be determined by CHARGE and SPIN.
Modifiable: never
Allowed values: (any) >= 0.0
Default value : NELECTRONS/2
"""
        opt_obj.value = None
        self._options['ndown'] = opt_obj

        self.__dict__['ndown'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spin_polarized'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Turns on/off spin polarization.
Modifiable: never
Allowed values: TRUE or FALSE
Default value : FALSE unless SPIN>0
"""
        opt_obj.value = None
        self._options['spin_polarized'] = opt_obj

        self.__dict__['spin_polarized'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spin_polarised'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Turns on/off spin polarisation (English spelling).
Modifiable: never
Allowed values: TRUE or FALSE
Default value : FALSE unless SPIN>0
"""
        opt_obj.value = None
        self._options['spin_polarised'] = opt_obj

        self.__dict__['spin_polarised'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nspins'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of spin channels - for a spin polarised calculation NSPINS=2,  for a non-spin polarised calculation NSPINS=1.
Modifiable: never
Allowed values: 1 or 2
Default value : set by SPIN_POLARISED
"""
        opt_obj.value = None
        self._options['nspins'] = opt_obj

        self.__dict__['nspins'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nextra_bands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of extra bands above current_params%nelectrons/2.
Necessary for metal or finite temperature insulator.
Modifiable: never
Allowed values: (any integer) >= 0
Default value : 0 if FIX_OCCUPANCY or 4 otherwise
"""
        opt_obj.value = None
        self._options['nextra_bands'] = opt_obj

        self.__dict__['nextra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'perc_extra_bands'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The percentage of extra bands above current_params%nelectrons/2.
Necessary for metal or finite temperature insulator.
Modifiable: never
Allowed values: (any) >= 0.0
Default value : 0.0 if FIX_OCCUPANCY or 20% otherwise
"""
        opt_obj.value = None
        self._options['perc_extra_bands'] = opt_obj

        self.__dict__['perc_extra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'nbands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The maximum number of bands at any given k-point and spin component.
Can also be determined by NEXTRA_BANDS or PERC_EXTRA_BANDS.
Modifiable: never
Allowed values: (any) >= MAX(NUP,NDOWN)
Default value : MAX(NUP,NDOWN) + (NEXTRA_BANDS or PERC_EXTRA_BANDS)
"""
        opt_obj.value = None
        self._options['nbands'] = opt_obj

        self.__dict__['nbands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spin_treatment'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Choose the level of theory for treating the electronic spin.
Modifiable: never
Allowed values:
NONE (or PAIRED or FALSE) for a non-spin polarised calculation.
SCALAR (or COLINEAR, COLLINEAR, POLARISED or POLARIZED) for a spin polarised calculation.
VECTOR (or NONCOLINEAR or NONCOLLINEAR) for a non-collinear spin polarised calculation.
NB if VECTOR then cannot use certain other keywords such as NUP or NDOWN etc.
Default value : NONE
"""
        opt_obj.value = None
        self._options['spin_treatment'] = opt_obj

        self.__dict__['spin_treatment'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_temp'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The electron temperature in EDFT method.
Modifiable: restart only
Allowed values: (any) >= 0.0
Default value : 0.0 k
"""
        opt_obj.value = None
        self._options['elec_temp'] = opt_obj

        self.__dict__['elec_temp'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'electronic_minimizer'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The electron minimization method to use.
Modifiable: restart and on the fly
Allowed values: SD, CG, RMM/DIIS
Default value : CG
"""
        opt_obj.value = None
        self._options['electronic_minimizer'] = opt_obj

        self.__dict__['electronic_minimizer'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'max_sd_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of steepest descent steps in an SCF cycle.
Modifiable: restart and on the fly
Allowed values: (any integer) >=0
Default value : set by ELECTRONIC_MINIMIZER
"""
        opt_obj.value = None
        self._options['max_sd_steps'] = opt_obj

        self.__dict__['max_sd_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'max_cg_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of conjugate gradient steps in an SCF cycle.
Modifiable: restart and on the fly
Allowed values: (any integer) >=0
Default value : set by ELECTRONIC_MINIMIZER
"""
        opt_obj.value = None
        self._options['max_cg_steps'] = opt_obj

        self.__dict__['max_cg_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'max_diis_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of RMM/DIIS steps in an SCF cycle.
Modifiable: restart and on the fly
Allowed values: (any integer) >=0
Default value : set by ELECTRONIC_MINIMIZER
"""
        opt_obj.value = None
        self._options['max_diis_steps'] = opt_obj

        self.__dict__['max_diis_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The treatment of metals or finite temperature insulator to be used.
An alias for METALS_METHOD.
Modifiable: restart and on the fly
Allowed values: NONE (=ALLBANDS), DM, EDFT
Default value : DM
"""
        opt_obj.value = None
        self._options['elec_method'] = opt_obj

        self.__dict__['elec_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'metals_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The treatment of metals or finite temperature insulator to be used.
Modifiable: restart and on the fly
Allowed values: NONE (=ALLBANDS), DM, EDFT
Default value : DM
"""
        opt_obj.value = None
        self._options['metals_method'] = opt_obj

        self.__dict__['metals_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_energy_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the total energy per atom.
The difference between max and min energies over current_params%elec_convergence_win  iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-5 eV/atom
"""
        opt_obj.value = None
        self._options['elec_energy_tol'] = opt_obj

        self.__dict__['elec_energy_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_eigenvalue_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of a single eigenvalue during DM/DIIS  minimization. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-6 eV
"""
        opt_obj.value = None
        self._options['elec_eigenvalue_tol'] = opt_obj

        self.__dict__['elec_eigenvalue_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_force_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the total energy due to change in   max force per atom. The difference between max force on any atom over  current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : set by ELEC_ENERGY_TOL
"""
        opt_obj.value = None
        self._options['elec_force_tol'] = opt_obj

        self.__dict__['elec_force_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_convergence_win'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The electronic convergence criteria must be met for ELEC_CONVERGENCE_WIN  iterations before acceptance.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 2
Default value : 3
"""
        opt_obj.value = None
        self._options['elec_convergence_win'] = opt_obj

        self.__dict__['elec_convergence_win'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'max_scf_cycles'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of SCF cycles in an electronic minimization regardless of  convergence.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 30
"""
        opt_obj.value = None
        self._options['max_scf_cycles'] = opt_obj

        self.__dict__['max_scf_cycles'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spin_fix'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Only relevant for a FIX_OCCUPANCY=FALSE calculation.
The total spin is held constant for SPIN_FIX SCF cycles (or less if electronic
convergence criteria met with the fixed spin) and then allowed to relax.
If SPIN_FIX<0 then the total spin is held constant for all SCF cycles.
Modifiable: never
Allowed values: (any integer)
Default value : 10
"""
        opt_obj.value = None
        self._options['spin_fix'] = opt_obj

        self.__dict__['spin_fix'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'fix_occupancy'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines if the system is treated as an insulator or a metal.
Modifiable: never
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['fix_occupancy'] = opt_obj

        self.__dict__['fix_occupancy'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'smearing_scheme'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the Fermi-surface smearing scheme to be used if the system is not  FIX_OCCUPANCY.
Modifiable: restart and on the fly
Allowed values: GAUSSIAN, GAUSSIANSPLINES, FERMIDIRAC, HERMITEPOLYNOMIALS,  COLDSMEARING
Default value : GAUSSIAN
"""
        opt_obj.value = None
        self._options['smearing_scheme'] = opt_obj

        self.__dict__['smearing_scheme'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'smearing_width'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the width of the Fermi-surface smearing if the system is not  FIX_OCCUPANCY.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.2 eV
"""
        opt_obj.value = None
        self._options['smearing_width'] = opt_obj

        self.__dict__['smearing_width'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efermi_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the Fermi-energy during if not  FIX_OCCUPANCY calculation.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.1 * ELEC_EIGENVALUE_TOL
"""
        opt_obj.value = None
        self._options['efermi_tol'] = opt_obj

        self.__dict__['efermi_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'num_occ_cycles'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of occupancy minimization cycles for each electronic minimization  step within EDFT scheme.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 6
"""
        opt_obj.value = None
        self._options['num_occ_cycles'] = opt_obj

        self.__dict__['num_occ_cycles'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'dipole_correction'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the scheme used to correct spurious dipole-dipole interactions due  to periodic boundary conditions.
Modifiable: restart only
Allowed values: NONE, STATIC, SELF CONSISTENT
Default value : NONE
"""
        opt_obj.value = None
        self._options['dipole_correction'] = opt_obj

        self.__dict__['dipole_correction'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'dipole_dir'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies the direction of the spurious dipole-dipole interactions due  to periodic boundary conditions. Can be 1D Cartesian x/y/z or  (if DIPOLE_CORRECTION = SELF CONSISTENT) all 3D.
Modifiable: restart only
Allowed values: X, Y, Z, A (=all)
Default value : Z
"""
        opt_obj.value = None
        self._options['dipole_dir'] = opt_obj

        self.__dict__['dipole_dir'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_dump_file'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Name of the file to periodically write the wavefunctions, density, etc to during  electronic minimization, for backup or current_params%reuse/current_params%continuation.
If set to NULL then no dumps will be written.
Modifiable: restart only
Allowed values: up to 255 character filename
Default value : <seedname>.wvfn
"""
        opt_obj.value = None
        self._options['elec_dump_file'] = opt_obj

        self.__dict__['elec_dump_file'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'num_dump_cycles'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Number of SCF cycles between wavefunction dumps.
If <=0 then no dumps will be written.
Modifiable: restart and on the fly
Allowed values: (any integer)
Default value : 0
"""
        opt_obj.value = None
        self._options['num_dump_cycles'] = opt_obj

        self.__dict__['num_dump_cycles'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elec_restore_file'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Name of file (ELEC_DUMP_FILE) to restore wavefunctions, density, etc from during  a current_params%reuse/current_params%continuation. If set to NULL then nothing will be read.
Modifiable: restart only
Allowed values: up to 255 character filename
Default value : NULL
"""
        opt_obj.value = None
        self._options['elec_restore_file'] = opt_obj

        self.__dict__['elec_restore_file'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mixing_scheme'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the mixing scheme to be used in the density mixing procedure within  DM scheme.
Modifiable: restart only
Allowed values: KERKER, LINEAR, BROYDEN, PULAY
Default value : BROYDEN
"""
        opt_obj.value = None
        self._options['mixing_scheme'] = opt_obj

        self.__dict__['mixing_scheme'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mix_history_length'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the maximum number of charge/spin densities to be kept in the mixing  history within DM scheme.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : 7
"""
        opt_obj.value = None
        self._options['mix_history_length'] = opt_obj

        self.__dict__['mix_history_length'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mix_charge_amp'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the mixing amplitude of the charge density within DM scheme.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 0.8
"""
        opt_obj.value = None
        self._options['mix_charge_amp'] = opt_obj

        self.__dict__['mix_charge_amp'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mix_charge_gmax'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Determines the maximum G-vector component of charge density to mix within DM  scheme.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 1.5 /ANG
"""
        opt_obj.value = None
        self._options['mix_charge_gmax'] = opt_obj

        self.__dict__['mix_charge_gmax'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mix_spin_amp'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the mixing amplitude of the charge density within DM scheme.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 2.0
"""
        opt_obj.value = None
        self._options['mix_spin_amp'] = opt_obj

        self.__dict__['mix_spin_amp'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mix_spin_gmax'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Determines the maximum G-vector component of spin density to mix within DM scheme.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 1.5 /ANG
"""
        opt_obj.value = None
        self._options['mix_spin_gmax'] = opt_obj

        self.__dict__['mix_spin_gmax'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mix_cut_off_energy'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the cut off energy for the densities within the DM scheme.
Modifiable: never
Allowed values: (any) > 0.0
Default value : CUT_OFF_ENERGY
"""
        opt_obj.value = None
        self._options['mix_cut_off_energy'] = opt_obj

        self.__dict__['mix_cut_off_energy'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'mix_metric_q'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the metric for the densities within the DM scheme.
Modifiable: never
Allowed values: (any) > 0.0
Default value : set by ELECTRONIC_MINIMIZER
"""
        opt_obj.value = None
        self._options['mix_metric_q'] = opt_obj

        self.__dict__['mix_metric_q'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'popn_calculate'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to do a population analysis of the charge density.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['popn_calculate'] = opt_obj

        self.__dict__['popn_calculate'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'popn_bond_cutoff'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the maximum length of a bond for a population analysis calculation.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 3.0 ANG
"""
        opt_obj.value = None
        self._options['popn_bond_cutoff'] = opt_obj

        self.__dict__['popn_bond_cutoff'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'pdos_calculate_weights'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to do a partial DOS calculation.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['pdos_calculate_weights'] = opt_obj

        self.__dict__['pdos_calculate_weights'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_max_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the maximum number of iterations to perform when calculating band structure.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 60 (or 240 if TASK=PHONON etc)
"""
        opt_obj.value = None
        self._options['bs_max_iter'] = opt_obj

        self.__dict__['bs_max_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_max_cg_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of conjugate-gradient steps to take in the electronic  minimizer, before resetting to the steepest descents direction, when doing a  band structure calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 25 (or 5 if TASK=MAGRES or PHONON etc)
"""
        opt_obj.value = None
        self._options['bs_max_cg_steps'] = opt_obj

        self.__dict__['bs_max_cg_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_nextra_bands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of extra bands in a bandstructure calculation above NBANDS.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['bs_nextra_bands'] = opt_obj

        self.__dict__['bs_nextra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_perc_extra_bands'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The percentage of extra bands in a bandstructure calculation above NBANDS.
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : 0.0
"""
        opt_obj.value = None
        self._options['bs_perc_extra_bands'] = opt_obj

        self.__dict__['bs_perc_extra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_nbands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the number of bands per k-point in band structure calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : NBANDS + (5*SQRT(NBANDS) or BS_NEXTRA_BANDS or BS_PERC_EXTRA_BANDS)
"""
        opt_obj.value = None
        self._options['bs_nbands'] = opt_obj

        self.__dict__['bs_nbands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_eigenvalue_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of a single eigenvalue/band during  bandstructure calculation. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-6 eV/eigenvalue (or 10^-9 eV/eval if TASK=MAGRES or PHONON etc)
"""
        opt_obj.value = None
        self._options['bs_eigenvalue_tol'] = opt_obj

        self.__dict__['bs_eigenvalue_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_xc_functional'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during  a bandstructure calculation.
Modifiable: restart only
Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE03, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.
In addition, we now support libXC and all the additional functionals therein.
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['bs_xc_functional'] = opt_obj

        self.__dict__['bs_xc_functional'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_xc_definition'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during
a bandstructure calculation.
This version is a BLOCK keyword, with the flexibility to allow an arbitrary
mixing of any of the basic BS_XC_FUNCTIONAL components.
Basic format: a series of separate lines, each containing <func> <weight>
where <func> is the appropriate kernel for either eXchange or Correlation or both
and <weight> is supposed to add to 1.0 for both eXchange and Correlation.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['bs_xc_definition'] = opt_obj

        self.__dict__['bs_xc_definition'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_re_est_k_scrn'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """(See description of NLXC_RE_EST_K_SCRN). If this is true then the screening length  will be re-estimated from the density before a bandstructure calculation.
(If NLXC_RE_EST_K_SCRN is also true then this should have no effect.)
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['bs_re_est_k_scrn'] = opt_obj

        self.__dict__['bs_re_est_k_scrn'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'bs_write_eigenvalues'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write out additional eigenvalue information to .castep file.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['bs_write_eigenvalues'] = opt_obj

        self.__dict__['bs_write_eigenvalues'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the method to use for geometry optimization.
Modifiable: restart only
Allowed values: BFGS, LBFGS, DAMPEDMD, DELOCALIZED, FIRE, TPSD, PES
Default value : BFGS
"""
        opt_obj.value = None
        self._options['geom_method'] = opt_obj

        self.__dict__['geom_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_max_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the maximum number of geometry optimization iterations.
Modifiable: restart and on the fly
Allowed values: (any integer) >= GEOM_CONVERGENCE_WIN
Default value : 30
"""
        opt_obj.value = None
        self._options['geom_max_iter'] = opt_obj

        self.__dict__['geom_max_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_energy_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the total energy during geometry  optimization. The difference between max and min energies over  current_params%geom_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 2*10^-5 eV
"""
        opt_obj.value = None
        self._options['geom_energy_tol'] = opt_obj

        self.__dict__['geom_energy_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_force_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the maximum |ionic force| during  geometry optimization.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.05 eV/ANG
"""
        opt_obj.value = None
        self._options['geom_force_tol'] = opt_obj

        self.__dict__['geom_force_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_disp_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the maximum |ionic displacement| during  geometry optimization.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.001 ANG
"""
        opt_obj.value = None
        self._options['geom_disp_tol'] = opt_obj

        self.__dict__['geom_disp_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_stress_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the maximum stress component during  unit cell optimization.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.1 GPa
"""
        opt_obj.value = None
        self._options['geom_stress_tol'] = opt_obj

        self.__dict__['geom_stress_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_convergence_win'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The geometry energy optimization convergence criteria must be met for  GEOM_CONVERGENCE_WIN iterations before acceptance.
Modifiable: restart and on the fly
Allowed values: (any integer) > 1
Default value : 2
"""
        opt_obj.value = None
        self._options['geom_convergence_win'] = opt_obj

        self.__dict__['geom_convergence_win'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_modulus_est'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The estimated bulk modulus which will be used to optimize the cell  relaxation where appropriate.
A negative value indicates update estimated value after 1st step.
Allowed values: (any) /= 0.0
Default value : 500 GPa
"""
        opt_obj.value = None
        self._options['geom_modulus_est'] = opt_obj

        self.__dict__['geom_modulus_est'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_frequency_est'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The estimated average phonon frequency at the gamma point which will be used  to optimize the ionic relaxation where appropriate.
A negative value indicates update estimated value after 1st step.
Modifiable: restart and on the fly
Allowed values: (any) /= 0.0
Default value : 50 THz
"""
        opt_obj.value = None
        self._options['geom_frequency_est'] = opt_obj

        self.__dict__['geom_frequency_est'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_spin_fix'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """If not a FIX_OCCUPANCY calculation, then the total spin is allowed to vary  after GEOM_SPIN_FIX steps of the geometry optimization algorithm, or is held  constant at the value found at the end of the first configuration if  GEOM_SPIN_FIX<0.
Modifiable: restart and on the fly
Allowed values: (any integer)
Default value : 0
"""
        opt_obj.value = None
        self._options['geom_spin_fix'] = opt_obj

        self.__dict__['geom_spin_fix'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_use_linmin'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to perform line minimisation within a geometry optimisation.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['geom_use_linmin'] = opt_obj

        self.__dict__['geom_use_linmin'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_linmin_tol'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Tolerance for accepting line minimisation within a geometry optimisation -  if proposed optimal (dimensionless) step length is within tolerance of last  attempted step then last step will be accepted.
Modifiable: restart and on the fly
Allowed values: 0.0 < (any) 1.0
Default value : 0.4
"""
        opt_obj.value = None
        self._options['geom_linmin_tol'] = opt_obj

        self.__dict__['geom_linmin_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_lbfgs_max_updates'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If GEOM_METHOD=LBFGS then only store GEOM_LBFGS_MAX_UPDATES number of updates.
If GEOM_LBFGS_MAX_UPDATES=0 then the number of updates stored will grow as required.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['geom_lbfgs_max_updates'] = opt_obj

        self.__dict__['geom_lbfgs_max_updates'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_tpsd_init_stepsize'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """If GEOM_METHOD=TPSD
If GEOM_TPSD_INIT_STEPSIZE=0 then the default value is taken.
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : calculated based on system
"""
        opt_obj.value = None
        self._options['geom_tpsd_init_stepsize'] = opt_obj

        self.__dict__['geom_tpsd_init_stepsize'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'geom_tpsd_iterchange'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """If GEOM_METHOD=TPSD then only store GEOM_TPSD_ITERCHANGE number of updates before change to BFGS.
If GEOM_TPSD_ITERCHANGE=0 then the number of updates done as TPSD is unlimited.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['geom_tpsd_iterchange'] = opt_obj

        self.__dict__['geom_tpsd_iterchange'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_num_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The number of molecular dynamics steps to perform.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 100
"""
        opt_obj.value = None
        self._options['md_num_iter'] = opt_obj

        self.__dict__['md_num_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_delta_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The timestep for  molecular dynamics.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 1.0 FS
"""
        opt_obj.value = None
        self._options['md_delta_t'] = opt_obj

        self.__dict__['md_delta_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_ensemble'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The ensemble for the molecular dynamics run.
Modifiable: restart only
Allowed values: NVE, NVT, NPH, NPT
Default value : NVE
"""
        opt_obj.value = None
        self._options['md_ensemble'] = opt_obj

        self.__dict__['md_ensemble'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_use_pathint'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Used to turn path integral MD on (true) or off.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['md_use_pathint'] = opt_obj

        self.__dict__['md_use_pathint'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_num_beads'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Number of beads in path integral MD - must be equal to NUM_FARMS if using  farm parallelism.
Modifiable: restart only
Allowed values: (any integer) > 0
Default value : if NUM_FARMS=1 then set by MD_TEMPERATURE
"""
        opt_obj.value = None
        self._options['md_num_beads'] = opt_obj

        self.__dict__['md_num_beads'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_pathint_init'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The initialisation method for each bead with path integral MD.
Modifiable: restart only
Allowed values: GAUSSIAN, POINT, ORIGINAL (deprecated)
Default value : GAUSSIAN
"""
        opt_obj.value = None
        self._options['md_pathint_init'] = opt_obj

        self.__dict__['md_pathint_init'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_pathint_staging'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Used to turn staging modes on (true) or off for path integral MD.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['md_pathint_staging'] = opt_obj

        self.__dict__['md_pathint_staging'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_pathint_num_stages'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Number of separate stages per particle in staging mode path integral MD -  must be a divisor of MD_NUM_BEADS.
Modifiable: restart and on the fly
Allowed values: 1 <= (any integer) <= MD_NUM_BEADS
Default value : 1
"""
        opt_obj.value = None
        self._options['md_pathint_num_stages'] = opt_obj

        self.__dict__['md_pathint_num_stages'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_temperature'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The desired temperature of the molecular dynamics if not NVE ensemble.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 300 k
"""
        opt_obj.value = None
        self._options['md_temperature'] = opt_obj

        self.__dict__['md_temperature'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_thermostat'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The thermostat method of the molecular dynamics if not NVE ensemble.
Modifiable: restart only
Allowed values: NOSE-HOOVER, LANGEVIN, HOOVER-LANGEVIN
Default value : NOSE-HOOVER
"""
        opt_obj.value = None
        self._options['md_thermostat'] = opt_obj

        self.__dict__['md_thermostat'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_barostat'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The barostat method of the molecular dynamics if not constant-volume ensemble.
Modifiable: restart only
Allowed values: ANDERSEN-HOOVER, PARRINELLO-RAHMAN
Default value : ANDERSEN-HOOVER
"""
        opt_obj.value = None
        self._options['md_barostat'] = opt_obj

        self.__dict__['md_barostat'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_ion_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Used to set relevant MD thermostat parameters, e.g. Nose-Hoover or Hoover-Langvein  thermostat mass or Langevin damping time.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : if MD_THERMOSTAT=NOSE-HOOVER or HOOVER-LANGEVIN then 10*MD_DELTA_T
else 100*MD_DELTA_T
"""
        opt_obj.value = None
        self._options['md_ion_t'] = opt_obj

        self.__dict__['md_ion_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_cell_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Used to set relevant MD barostat parameters, e.g. Nose-Hoover barostat mass  or Langevin damping time.
Modifiable: restart only
Allowed values: (any) > 0.0
Default value : 10*MD_ION_T
"""
        opt_obj.value = None
        self._options['md_cell_t'] = opt_obj

        self.__dict__['md_cell_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_nhc_length'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """A chain of Nose-Hoover thermostats of given length may be used to thermostat  an NVT run or two separate chains (ions and cell) may be used to thermostat  an NPT run.
Modifiable: never
Allowed values: (any integer) >= 1
Default value : 5
"""
        opt_obj.value = None
        self._options['md_nhc_length'] = opt_obj

        self.__dict__['md_nhc_length'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_nose_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use MD_ION_T instead.
"""
        opt_obj.value = None
        self._options['md_nose_t'] = opt_obj

        self.__dict__['md_nose_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_langevin_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """NB This is an OBSOLETE form - please use MD_ION_T instead.
"""
        opt_obj.value = None
        self._options['md_langevin_t'] = opt_obj

        self.__dict__['md_langevin_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_extrap'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The wavefunction extrapolation scheme for molecular dynamics.
Also used for charge density extrapolation within DM scheme.
Modifiable: restart only
Allowed values: NONE, FIRST, SECOND, MIXED
Default value : FIRST
"""
        opt_obj.value = None
        self._options['md_extrap'] = opt_obj

        self.__dict__['md_extrap'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_extrap_fit'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether to calculate best-fit parameters (=TRUE) for use in the  wavefunction extrapolation scheme or use constant parameters (=FALSE) from  Taylor expansion instead.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['md_extrap_fit'] = opt_obj

        self.__dict__['md_extrap_fit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_xlbomd'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether to use eXtended Lagrangian Born-Oppenheimer MD (XL-BOMD) instead of  wavefunction extrapolation scheme.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['md_xlbomd'] = opt_obj

        self.__dict__['md_xlbomd'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_xlbomd_history'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """This specifies the number of stored wavefunctions (and densities if using DM) in the  XL-BOMD evolution scheme.
Modifiable: restart only
Allowed values: 0 or 3 <= (integer) <= 9
Default value : 0
"""
        opt_obj.value = None
        self._options['md_xlbomd_history'] = opt_obj

        self.__dict__['md_xlbomd_history'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_damping_scheme'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The scheme with which to calculate the optimal damping parameters for damped  MD in geometry optimization. Can use independent modes algorithm, coupled  modes algorithm or steepest descent dynamics.
Modifiable: restart and on the fly
Allowed values: INDEPENDENT, COUPLED, STEEPESTDESCENTS
Default value : INDEPENDENT
"""
        opt_obj.value = None
        self._options['md_damping_scheme'] = opt_obj

        self.__dict__['md_damping_scheme'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_damping_reset'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """This specifies the number of molecular dynamics steps between recalculating  the damping parameters. A value of 0 means never recalculate.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 30
"""
        opt_obj.value = None
        self._options['md_damping_reset'] = opt_obj

        self.__dict__['md_damping_reset'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_opt_damped_delta_t'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether to attempt to calculate an optimum time step (=TRUE) within  damped MD (geometry optimization) or use normal MD timestep (=FALSE).
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['md_opt_damped_delta_t'] = opt_obj

        self.__dict__['md_opt_damped_delta_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_elec_energy_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the total energy per atom during SCF  cycle in an MD calculation. The difference between max and min energies over   current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : ELEC_ENERGY_TOL
"""
        opt_obj.value = None
        self._options['md_elec_energy_tol'] = opt_obj

        self.__dict__['md_elec_energy_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_elec_eigenvalue_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Tolerance for accepting convergence of a single eigenvalue during DM/DIIS  minimization during SCF cycle in an MD calculation. The difference between  max and min energies over current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : ELEC_EIGENVALUE_TOL
"""
        opt_obj.value = None
        self._options['md_elec_eigenvalue_tol'] = opt_obj

        self.__dict__['md_elec_eigenvalue_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_elec_force_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the total energy due to change in max  force per atom during SCF cycle in an MD calculation. The difference between  max force on any atom over current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : ELEC_FORCE_TOL
"""
        opt_obj.value = None
        self._options['md_elec_force_tol'] = opt_obj

        self.__dict__['md_elec_force_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_elec_convergence_win'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The electronic convergence criteria must be met for MD_ELEC_CONVERGENCE_WIN  iterations before acceptance during SCF cycle in an MD calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 2
Default value : ELEC_CONVERGENCE_WIN
"""
        opt_obj.value = None
        self._options['md_elec_convergence_win'] = opt_obj

        self.__dict__['md_elec_convergence_win'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_sample_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Ab initio properties will be sampled every MD_SAMPLE_ITER steps during  MD calculation if set >0.
Modifiable: restart and on the fly
Allowed values: (any integer)
Default value : 0
"""
        opt_obj.value = None
        self._options['md_sample_iter'] = opt_obj

        self.__dict__['md_sample_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_eqm_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specify a enhanced scheme for speeding equilibration which does not  necessarily conform to any ensemble.
Modifiable: restart and on the fly
Allowed values: NONE, BERENDSEN
Default value : NONE
"""
        opt_obj.value = None
        self._options['md_eqm_method'] = opt_obj

        self.__dict__['md_eqm_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_eqm_ion_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specify characteristic time for ions to use in enhanced MD equilibration method.
Modifiable: restart and on the fly
Allowed values: (any) > MD_DELTA_T
Default value : MD_ION_T
"""
        opt_obj.value = None
        self._options['md_eqm_ion_t'] = opt_obj

        self.__dict__['md_eqm_ion_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_eqm_cell_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specify characteristic time for cell to use in enhanced MD equilibration method.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : MD_CELL_T
"""
        opt_obj.value = None
        self._options['md_eqm_cell_t'] = opt_obj

        self.__dict__['md_eqm_cell_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_eqm_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specify equilibration time, ie that for MD to use enhanced MD equilibration method.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.0 if MD_EQM_METHOD=NONE else 1.0 PS if MD_EQM_METHOD=BERENDSEN
"""
        opt_obj.value = None
        self._options['md_eqm_t'] = opt_obj

        self.__dict__['md_eqm_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_use_plumed'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to perform metadynamics using the PLUMED framework.
To use this option you must compile and link against the PLUMED source,
which you can find online at http://merlino.mi.infn.it/~plumed/PLUMED/Home.html
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['md_use_plumed'] = opt_obj

        self.__dict__['md_use_plumed'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_hug_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specify a non-equilibrium scheme for finding states on the Hugoniot. The cell is compressed in  specified manner but dynamics does not conform to any ensemble.
Modifiable: restart only
Allowed values: NONE, XDIR, YDIR, ZDIR, ISO, ISOTROPIC
Default value : NONE
"""
        opt_obj.value = None
        self._options['md_hug_method'] = opt_obj

        self.__dict__['md_hug_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_hug_t'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specify characteristic coupling constant for Hugoniostat. Usually written as frequency in most derivations.
Modifiable: restart and on the fly
Allowed values: (any) > MD_DELTA_T
Default value : MD_ION_T
"""
        opt_obj.value = None
        self._options['md_hug_t'] = opt_obj

        self.__dict__['md_hug_t'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'md_hug_compression'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The ratio of target volume:initial volume which specifies the state on the Hugoniot to simulate.
Modifiable: restart and on the fly
Allowed values: 0.0 < (any) <= 1.0
Default value : 1.0
"""
        opt_obj.value = None
        self._options['md_hug_compression'] = opt_obj

        self.__dict__['md_hug_compression'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_nextra_bands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of extra bands in an optical matrix elements calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['optics_nextra_bands'] = opt_obj

        self.__dict__['optics_nextra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_perc_extra_bands'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The percentage of extra bands in an optical matrix elements calculation.
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : 0.0
"""
        opt_obj.value = None
        self._options['optics_perc_extra_bands'] = opt_obj

        self.__dict__['optics_perc_extra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_nbands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the number of bands in an optical matrix elements calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= MAX(NUP,NDOWN)
Default value : NBANDS + (5*SQRT(NBANDS) or OPTICS_NEXTRA_BANDS or OPTICS_PERC_EXTRA_BANDS)
"""
        opt_obj.value = None
        self._options['optics_nbands'] = opt_obj

        self.__dict__['optics_nbands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_xc_functional'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during an optics calculation.
Modifiable: restart only
Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, ZERO, WDA.
In addition, we now support libXC and all the non-hybrid functionals therein.
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['optics_xc_functional'] = opt_obj

        self.__dict__['optics_xc_functional'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'optics_xc_definition'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during
an optics calculation.
This version is a BLOCK keyword, with the flexibility to allow an arbitrary
mixing of any of the basic OPTICS_XC_FUNCTIONAL components.
Basic format: a series of separate lines, each containing <func> <weight>
where <func> is the appropriate kernel for either eXchange or Correlation or both
and <weight> is supposed to add to 1.0 for both eXchange and Correlation.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['optics_xc_definition'] = opt_obj

        self.__dict__['optics_xc_definition'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The search method used to locate transition states.
Modifiable: restart only
Allowed values: LSTQST,  NEB
Default value : LSTQST
"""
        opt_obj.value = None
        self._options['tssearch_method'] = opt_obj

        self.__dict__['tssearch_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_lstqst_protocol'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The protocol used in Linear or Quadratic searches.
Modifiable: restart only
Allowed values: LSTMAXIMUM, HALGREN-LIPSCOMB, LST/OPTIMIZATION,  COMPLETELSTQST, QST/OPTIMIZATION
Default value : LSTMAXIMUM
"""
        opt_obj.value = None
        self._options['tssearch_lstqst_protocol'] = opt_obj

        self.__dict__['tssearch_lstqst_protocol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_qst_max_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of QST iterations during an LST/QST search.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 5
"""
        opt_obj.value = None
        self._options['tssearch_qst_max_iter'] = opt_obj

        self.__dict__['tssearch_qst_max_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_cg_max_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of CG steps during an LST/QST search.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 20
"""
        opt_obj.value = None
        self._options['tssearch_cg_max_iter'] = opt_obj

        self.__dict__['tssearch_cg_max_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_max_path_points'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of path points for NEB search.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 20
"""
        opt_obj.value = None
        self._options['tssearch_max_path_points'] = opt_obj

        self.__dict__['tssearch_max_path_points'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_force_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the maximum |ionic force| during  QST search.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.005 H/BOHR
"""
        opt_obj.value = None
        self._options['tssearch_force_tol'] = opt_obj

        self.__dict__['tssearch_force_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_disp_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the maximum |ionic displacement|  during QST search.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.01 BOHR
"""
        opt_obj.value = None
        self._options['tssearch_disp_tol'] = opt_obj

        self.__dict__['tssearch_disp_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tssearch_energy_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the maximum energy difference  during NEB search.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.00002 HARTREE
"""
        opt_obj.value = None
        self._options['tssearch_energy_tol'] = opt_obj

        self.__dict__['tssearch_energy_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_const_basis'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Withdrawn keyword.
"""
        opt_obj.value = None
        self._options['phonon_const_basis'] = opt_obj

        self.__dict__['phonon_const_basis'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_energy_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the force constants during PHONON  calculation. The difference between max and min E(2) values over  current_params%phonon_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-5 eV/ANG*ANG
"""
        opt_obj.value = None
        self._options['phonon_energy_tol'] = opt_obj

        self.__dict__['phonon_energy_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_max_cg_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of conjugate gradient steps in PHONON calculation before  performing a SD reset.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['phonon_max_cg_steps'] = opt_obj

        self.__dict__['phonon_max_cg_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_max_cycles'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of SCF cycles in PHONON calculation regardless of convergence.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0 or if TASK=PHONON etc >= PHONON_CONVERGENCE_WIN
Default value : 50
"""
        opt_obj.value = None
        self._options['phonon_max_cycles'] = opt_obj

        self.__dict__['phonon_max_cycles'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_convergence_win'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The LR convergence criteria must be met for PHONON_CONVERGENCE_WIN iterations  before acceptance.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 2
Default value : 3 if PHONON_DFPT_METHOD=DM, or 2 otherwise
"""
        opt_obj.value = None
        self._options['phonon_convergence_win'] = opt_obj

        self.__dict__['phonon_convergence_win'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_preconditioner'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The preconditioning scheme used by the CG minimiser in LR.
Modifiable: restart and on the fly
Allowed values: RTPA, TPA, PS, HR, NONE
Default value : TPA
"""
        opt_obj.value = None
        self._options['phonon_preconditioner'] = opt_obj

        self.__dict__['phonon_preconditioner'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_use_kpoint_symmetry'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects which k-point set to use For each phonon q-vector in LR:
T => use the irreducible k-point set of the (reduced) symmetry,
F => use the complete fully symmetric k-point set.
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['phonon_use_kpoint_symmetry'] = opt_obj

        self.__dict__['phonon_use_kpoint_symmetry'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_calculate_dos'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines whether or not the phonon density of states will be calculated.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['phonon_calculate_dos'] = opt_obj

        self.__dict__['phonon_calculate_dos'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_dos_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The resolution at which a phonon density-of-states will be calculated.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10.0 CM^-1
"""
        opt_obj.value = None
        self._options['phonon_dos_spacing'] = opt_obj

        self.__dict__['phonon_dos_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_dos_limit'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The largest phonon to be included in a phonon density-of-states calculation.
Modifiable: restart and on the fly
Allowed values: (any) > PHONON_DOS_SPACING
Default value : 5000.0 CM^-1
"""
        opt_obj.value = None
        self._options['phonon_dos_limit'] = opt_obj

        self.__dict__['phonon_dos_limit'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_finite_disp'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The amplitude of the ionic perturbation to be used in a finite displacement  phonon calculation.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.01 BOHR
"""
        opt_obj.value = None
        self._options['phonon_finite_disp'] = opt_obj

        self.__dict__['phonon_finite_disp'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_cutoff_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Selects which method to use to extract non-periodic force constant matrix from periodic supercell.
With the CUMULANT method, all contributions from the periodic supercell are summed with a suitable  weighting factor to avoid double counting of image contributions.
The SPHERICAL method, uses a minimum image convention with a spherical cutoff  given by PHONON_FORCE_CONSTANT_CUTOFF.
Modifiable: restart and on the fly
Allowed values: CUMULANT and SPHERICAL
Default value : CUMULANT
"""
        opt_obj.value = None
        self._options['phonon_fine_cutoff_method'] = opt_obj

        self.__dict__['phonon_fine_cutoff_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_force_constant_cutoff'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The cutoff for the force constant matrix in a phonon calculation on a fine  grid with supercell method.
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : 0.0
"""
        opt_obj.value = None
        self._options['phonon_force_constant_cutoff'] = opt_obj

        self.__dict__['phonon_force_constant_cutoff'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_force_constant_cut_scale'
        opt_obj.type = 'Real'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Scale factor used when PHONON_FINE_CUTOFF_METHOD = CUMULANT.
The range of force constant terms included is within an ellipsoidal region scaled  by this factor along the principle axes relative to the largest ellipsoid which  can be packed with the periodicity of the supercell.
Modifiable: restart and on the fly
Allowed values: 0.0 <= (any) >= 1.0
Default value : 1.0
"""
        opt_obj.value = None
        self._options['phonon_force_constant_cut_scale'] = opt_obj

        self.__dict__['phonon_force_constant_cut_scale'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_force_constant_ellipsoid'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Scale factor used when PHONON_FINE_CUTOFF_METHOD = DEFAULT.
Alias for PHONON_FORCE_CONSTANT_CUT_SCALE - deprecated version.
Modifiable: restart and on the fly
Allowed values: 0.0 <= (any) >= 1.0
Default value : 1.0
"""
        opt_obj.value = None
        self._options['phonon_force_constant_ellipsoid'] = opt_obj

        self.__dict__['phonon_force_constant_ellipsoid'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_fine_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects which calculation method to use for phonon calculation on a fine grid.
Modifiable: restart only
Allowed values: NONE, SUPERCELL, INTERPOLATE
Default value : SUPERCELL if TASK=THERMODYNAMICS else NONE
"""
        opt_obj.value = None
        self._options['phonon_fine_method'] = opt_obj

        self.__dict__['phonon_fine_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects which calculation method to use for phonons.
Modifiable: restart only
Allowed values: DFPT, LINEARRESPONSE, FINITEDISPLACEMENT
Default value : set by PHONON_FINE_METHOD
"""
        opt_obj.value = None
        self._options['phonon_method'] = opt_obj

        self.__dict__['phonon_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_dfpt_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects the solver for phonon density functional perturbation theory.
Modifiable: restart only
Allowed values: ALLBANDS(=VARIATIONAL) or DM(=GREEN) to select Gonze  variational or Baroni Green function with DM solver.
Default value : DM if FIX_OCCUPANCY=FALSE, otherwise ALLBANDS
"""
        opt_obj.value = None
        self._options['phonon_dfpt_method'] = opt_obj

        self.__dict__['phonon_dfpt_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'secondd_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Deprecated keyword - please use PHONON_METHOD instead
"""
        opt_obj.value = None
        self._options['secondd_method'] = opt_obj

        self.__dict__['secondd_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_calc_lo_to_splitting'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects whether to compute non-analytic contribution to dynamical matrix from  long-ranged electric field effects responsible for LO/TO splitting.
This requires calculation of the dielectric permittivity by efield linear-response  and the Born effective charges.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['phonon_calc_lo_to_splitting'] = opt_obj

        self.__dict__['phonon_calc_lo_to_splitting'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_sum_rule'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """DEPRECATED way to explicitly correct the dynamical matrix to enforce the  acoustic q=0 phonon sum rule, i.e. that 3 modes have zero frequency at q=0.
Should use PHONON_SUM_RULE_METHOD instead.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['phonon_sum_rule'] = opt_obj

        self.__dict__['phonon_sum_rule'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_sum_rule_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects a method to use when enforcing acoustic phonon sum rule.
Modifiable: restart and on the fly
Allowed values:
NONE       : No sum-rule correction will be applied.
RECIPROCAL : Correct dynamical matrix D(q) at each q using D(q=0).
REALSPACE : Correct the real-space force constant matrix C(R).
REAL-RECIP : Correct C(R) in realspace followed by D(q) in reciprocal space.
MOLECULAR : Correct D(0) using rotational as well as translational sum-rule.
MOLECULAR-1D : Correct D(0) for a linear molecule using rotational as well as translational sum-rule.
Default value : RECIPROCAL
"""
        opt_obj.value = None
        self._options['phonon_sum_rule_method'] = opt_obj

        self.__dict__['phonon_sum_rule_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calculate_born_charges'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects whether to compute Born effective charge tensors as part of a phonon  or efield linear-response calculation.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['calculate_born_charges'] = opt_obj

        self.__dict__['calculate_born_charges'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'born_charge_sum_rule'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects whether to explicitly correct the Born effective charge tensor to enforce the  sum rule that effective charges sum to zero.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['born_charge_sum_rule'] = opt_obj

        self.__dict__['born_charge_sum_rule'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'calculate_raman'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects whether to compute Raman intensities as part of a phonon  or efield linear-response calculation.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['calculate_raman'] = opt_obj

        self.__dict__['calculate_raman'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'raman_range_low'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Lower limit of a frequency window for which Raman intensities will be calculated.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 0.0 eV
"""
        opt_obj.value = None
        self._options['raman_range_low'] = opt_obj

        self.__dict__['raman_range_low'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'raman_range_high'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Upper limit of a frequency window for which Raman intensities will be calculated.
Modifiable: restart and on the fly
Allowed values: (any) > RAMAN_RANGE_LOW
Default value : 1.0 eV
"""
        opt_obj.value = None
        self._options['raman_range_high'] = opt_obj

        self.__dict__['raman_range_high'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_write_force_constants'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects whether to write out the real-space force constant matrix from a  phonon supercell or interpolation calculation (to the <seedname>.castep file).
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['phonon_write_force_constants'] = opt_obj

        self.__dict__['phonon_write_force_constants'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'phonon_write_dynamical'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects whether to write out the reciprocal space dynamical matrices  from a phonon  calculation (to the <seedname>.castep file).
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['phonon_write_dynamical'] = opt_obj

        self.__dict__['phonon_write_dynamical'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_dfpt_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects the solver for Efield density functional perturbation theory.
Modifiable: restart only
Allowed values: ALLBANDS(=VARIATIONAL) or DM(=GREEN) to select Gonze  variational or Baroni Green function with DM solver.
Default value : ALLBANDS
"""
        opt_obj.value = None
        self._options['efield_dfpt_method'] = opt_obj

        self.__dict__['efield_dfpt_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_max_cg_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of conjugate gradient steps in EFIELD calculation before  performing a SD reset.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['efield_max_cg_steps'] = opt_obj

        self.__dict__['efield_max_cg_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_max_cycles'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of SCF cycles in EFIELD calculation regardless of convergence.  Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 50
"""
        opt_obj.value = None
        self._options['efield_max_cycles'] = opt_obj

        self.__dict__['efield_max_cycles'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_convergence_win'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The LR convergence criteria must be met for EFIELD_CONVERGENCE_WIN iterations  before acceptance.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 2
Default value :  3 if EFIELD_DFPT_METHOD=DM, or 2 otherwise
"""
        opt_obj.value = None
        self._options['efield_convergence_win'] = opt_obj

        self.__dict__['efield_convergence_win'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_energy_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of the field constants during PHONON  calculation. The difference between max and min E(2) values over  current_params%efield_convergence_win iterations must be less than this.
NB This is an INTENSIVE parameter and has units of volume.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-5 Ang**3
"""
        opt_obj.value = None
        self._options['efield_energy_tol'] = opt_obj

        self.__dict__['efield_energy_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_calc_ion_permittivity'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to compute the zero-frequency dielectric permittivity  based on the ionic response to electric fields. This requires a gamma-point  phonon calculation in addition to the EFIELD linear response one.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['efield_calc_ion_permittivity'] = opt_obj

        self.__dict__['efield_calc_ion_permittivity'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_ignore_molec_modes'
        opt_obj.type = 'String'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Ignore the lowest lying (3,5,6) modes when computing the ionic contribution to  the permittivity and polarizability.
Modifiable: restart and on the fly
Allowed values: CRYSTAL, MOLECULE, LINEAR_MOLECULE
Default value : CRYSTAL
"""
        opt_obj.value = None
        self._options['efield_ignore_molec_modes'] = opt_obj

        self.__dict__['efield_ignore_molec_modes'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_freq_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Spacing of frequencies in calculation of frequency-dependent permittivity.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 1.0 cm^-1
"""
        opt_obj.value = None
        self._options['efield_freq_spacing'] = opt_obj

        self.__dict__['efield_freq_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'efield_oscillator_q'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Oscillator Q-factor for line-shape broadening in calculation of frequency-  dependent permittivity.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 50.0
"""
        opt_obj.value = None
        self._options['efield_oscillator_q'] = opt_obj

        self.__dict__['efield_oscillator_q'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'thermo_calculate_helmholtz'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to calculate the Helmholtz free energy.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['thermo_calculate_helmholtz'] = opt_obj

        self.__dict__['thermo_calculate_helmholtz'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'thermo_t_start'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The desired starting temperature for the thermodynamics calculation.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 298 K
"""
        opt_obj.value = None
        self._options['thermo_t_start'] = opt_obj

        self.__dict__['thermo_t_start'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'thermo_t_stop'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The desired final temperature for the thermodynamics calculation.
Modifiable: restart and on the fly
Allowed values: (any) >= THERMO_T_START
Default value : 298 K
"""
        opt_obj.value = None
        self._options['thermo_t_stop'] = opt_obj

        self.__dict__['thermo_t_stop'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'thermo_t_spacing'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The spacing between temperature values for the thermodynamics calculation.
Modifiable: restart and on the fly
Allowed values: (any) > (-epsilon)
Default value : THERMO_T_STOP - THERMO_T_START
"""
        opt_obj.value = None
        self._options['thermo_t_spacing'] = opt_obj

        self.__dict__['thermo_t_spacing'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'thermo_t_npoints'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of points in the temperature interval for the thermodynamics  calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 1
Default value : 2 if THERMO_T_STOP /= THERMO_T_START or 1 otherwise
"""
        opt_obj.value = None
        self._options['thermo_t_npoints'] = opt_obj

        self.__dict__['thermo_t_npoints'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_spread_tol'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for Wannier function spread minimisation at the Gamma point  (Lambda = Silvestrelli Sigma).
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : 10^-8
"""
        opt_obj.value = None
        self._options['wannier_spread_tol'] = opt_obj

        self.__dict__['wannier_spread_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_max_sd_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of steepest descent steps in the Wannier function calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 10000
"""
        opt_obj.value = None
        self._options['wannier_max_sd_steps'] = opt_obj

        self.__dict__['wannier_max_sd_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_sd_step'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Length of steepest descent step length in Wannier function spread minimisation.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 1.0
"""
        opt_obj.value = None
        self._options['wannier_sd_step'] = opt_obj

        self.__dict__['wannier_sd_step'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_print_cube'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of the (maximally localised) Wannier function to print out in .cube  (+ .pdb) format file.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 0
"""
        opt_obj.value = None
        self._options['wannier_print_cube'] = opt_obj

        self.__dict__['wannier_print_cube'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_spread_type'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects definition for Wannier function spread functional.
Modifiable: restart only
Allowed values: VANDERBILT, RESTA
Default value : VANDERBILT
"""
        opt_obj.value = None
        self._options['wannier_spread_type'] = opt_obj

        self.__dict__['wannier_spread_type'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_min_algor'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Spread minimisation algorithm: steepest descent or orbital rotations.
Modifiable: restart only
Allowed values: SD, OR
Default value : OR
"""
        opt_obj.value = None
        self._options['wannier_min_algor'] = opt_obj

        self.__dict__['wannier_min_algor'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_ion_moments'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects whether or not to compute ion multipole moments from maximally localised  Wannier functions.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['wannier_ion_moments'] = opt_obj

        self.__dict__['wannier_ion_moments'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_ion_rmax'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """A Wannier function belongs to an ion if its Wf centre is within a distance  rmax from the ion centre.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 2.0 Bohr
"""
        opt_obj.value = None
        self._options['wannier_ion_rmax'] = opt_obj

        self.__dict__['wannier_ion_rmax'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_ion_cut'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects whether or not to compute ion multipole moments from maximally localised  Wannier functions using truncated integration in real space.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['wannier_ion_cut'] = opt_obj

        self.__dict__['wannier_ion_cut'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_ion_cut_fraction'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """In the real-space integration for the calculation of ion moments only this  fraction of ion density will be included.
Modifiable: restart and on the fly
Allowed values: 0.0 < WANNIER_ION_CUT_FRACTION < 1.0
Default value : 0.999
"""
        opt_obj.value = None
        self._options['wannier_ion_cut_fraction'] = opt_obj

        self.__dict__['wannier_ion_cut_fraction'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_restart'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Requires that the Wannier function calculation should start from the results of a  previous calculation.
Modifiable: restart only
Allowed values: INITIAL, FINAL, NONE, where:
INITIAL: restart from before the spread minimisation.
FINAL: restart from the end of the previous calculation
NONE: do not restart from previous calculation.
Default value : NONE
"""
        opt_obj.value = None
        self._options['wannier_restart'] = opt_obj

        self.__dict__['wannier_restart'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_ion_cut_tol'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """In the real-space truncated integration for the calculation of ion moments the  truncation radius r_cut  for a given ion is determined by insisting that an  ion-centred sphere should contain current_params%wannier_ion_cut_fraction of the total charge  density of the ion, to within an accuracy current_params%wannier_ion_cut_tol * ion_density.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-5
"""
        opt_obj.value = None
        self._options['wannier_ion_cut_tol'] = opt_obj

        self.__dict__['wannier_ion_cut_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'wannier_ion_cmoments'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Selects whether or not to compute ion multipole moments from Wannier function  cumulant moments.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['wannier_ion_cmoments'] = opt_obj

        self.__dict__['wannier_ion_cmoments'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_task'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies which magnetic property to calculate.
Modifiable: restart and on the fly
Allowed values: SHIELDING, EFG, NMR, GTENSOR, HYPERFINE, EPR, JCOUPLING
Default value : SHIELDING
"""
        opt_obj.value = None
        self._options['magres_task'] = opt_obj

        self.__dict__['magres_task'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects which method to use for the position operator.
Modifiable: restart and on the fly
Allowed values: CRYSTAL, MOLECULAR, MOLECULAR3
Default value : CRYSTAL
"""
        opt_obj.value = None
        self._options['magres_method'] = opt_obj

        self.__dict__['magres_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_max_cg_steps'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of conjugate gradient steps in MAGRES calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 1
Default value : 250
"""
        opt_obj.value = None
        self._options['magres_max_cg_steps'] = opt_obj

        self.__dict__['magres_max_cg_steps'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_convergence_win'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The magres convergence criteria must be met for MAGRES_CONVERGENCE_WIN iterations  before acceptance.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 2
Default value : 2
"""
        opt_obj.value = None
        self._options['magres_convergence_win'] = opt_obj

        self.__dict__['magres_convergence_win'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_conv_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Energy tolerance for accepting convergence during magres calculation.
The difference between max and min energy values over MAGRES_CONVERGENCE_WIN  iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-12 eV if MAGRES_METHOD=CRYSTAL or 10^-9 eV otherwise
"""
        opt_obj.value = None
        self._options['magres_conv_tol'] = opt_obj

        self.__dict__['magres_conv_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_xc_functional'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during  a magres calculation.
Modifiable: restart only
Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, ZERO, WDA.
In addition, we now support libXC and all the non-hybrid functionals therein.
Default value : XC_FUNCTIONAL if allowed or PBE otherwise
"""
        opt_obj.value = None
        self._options['magres_xc_functional'] = opt_obj

        self.__dict__['magres_xc_functional'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_xc_definition'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during
a magres calculation.
This version is a BLOCK keyword, with the flexibility to allow an arbitrary
mixing of any of the basic MAGRES_XC_FUNCTIONAL components.
Basic format: a series of separate lines, each containing <func> <weight>
where <func> is the appropriate kernel for either eXchange or Correlation or both
and <weight> is supposed to add to 1.0 for both eXchange and Correlation.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['magres_xc_definition'] = opt_obj

        self.__dict__['magres_xc_definition'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_max_sc_cycles'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of self consistent cycles in MAGRES calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 1
Default value : 20
"""
        opt_obj.value = None
        self._options['magres_max_sc_cycles'] = opt_obj

        self.__dict__['magres_max_sc_cycles'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_jcoupling_task'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects which spin coupling terms to compute.
Modifiable: restart and on the fly
Allowed values: FC, SPIN, ORBITAL, ALL
Default value : ALL
"""
        opt_obj.value = None
        self._options['magres_jcoupling_task'] = opt_obj

        self.__dict__['magres_jcoupling_task'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'magres_write_response'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Specifies whether or not to write out the induced current to file.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['magres_write_response'] = opt_obj

        self.__dict__['magres_write_response'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_nextra_bands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of extra bands in an optical matrix elements calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['elnes_nextra_bands'] = opt_obj

        self.__dict__['elnes_nextra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_perc_extra_bands'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The percentage of extra bands in an optical matrix elements calculation.
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : 0.0
"""
        opt_obj.value = None
        self._options['elnes_perc_extra_bands'] = opt_obj

        self.__dict__['elnes_perc_extra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_nbands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Determines the number of bands in an optical matrix elements calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= MAX(NUP,NDOWN)
Default value : NBANDS + (5*SQRT(NBANDS) or ELNES_NEXTRA_BANDS or ELNES_PERC_EXTRA_BANDS)
"""
        opt_obj.value = None
        self._options['elnes_nbands'] = opt_obj

        self.__dict__['elnes_nbands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_xc_functional'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during an elnes calculation.
Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, ZERO, WDA.
In addition, we now support libXC and all the non-hybrid functionals therein.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['elnes_xc_functional'] = opt_obj

        self.__dict__['elnes_xc_functional'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_xc_definition'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during
an elnes calculation.
This version is a BLOCK keyword, with the flexibility to allow an arbitrary
mixing of any of the basic ELNES_XC_FUNCTIONAL components.
Basic format: a series of separate lines, each containing <func> <weight>
where <func> is the appropriate kernel for either eXchange or Correlation or both
and <weight> is supposed to add to 1.0 for both eXchange and Correlation.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['elnes_xc_definition'] = opt_obj

        self.__dict__['elnes_xc_definition'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'elnes_eigenvalue_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of a single eigenvalue/band during  ELNES calculation. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-6 eV/eigenvalue
"""
        opt_obj.value = None
        self._options['elnes_eigenvalue_tol'] = opt_obj

        self.__dict__['elnes_eigenvalue_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_theory'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The level of theory to use when doing electronic spectroscopy calculations.
Modifiable: restart and on the fly
Allowed values: DFT, TDDFT, G0W0
Default value : DFT
"""
        opt_obj.value = None
        self._options['spectral_theory'] = opt_obj

        self.__dict__['spectral_theory'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_task'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The type of electronic spectrum to calculate.
Modifiable: restart and on the fly
Allowed values: BANDSTRUCTURE, DOS, OPTICS, CORELOSS, ALL
Default value : BANDSTRUCTURE
"""
        opt_obj.value = None
        self._options['spectral_task'] = opt_obj

        self.__dict__['spectral_task'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_max_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the maximum number of iterations to perform when calculating band structure.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 60
"""
        opt_obj.value = None
        self._options['spectral_max_iter'] = opt_obj

        self.__dict__['spectral_max_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_max_steps_per_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of steps to take per iteration in the electronic  minimizer, before resetting to the steepest descents direction, when doing an  electronic spectroscopy calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 5
"""
        opt_obj.value = None
        self._options['spectral_max_steps_per_iter'] = opt_obj

        self.__dict__['spectral_max_steps_per_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_nextra_bands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of extra bands in an electronic spectroscopy calculation above NBANDS.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['spectral_nextra_bands'] = opt_obj

        self.__dict__['spectral_nextra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_perc_extra_bands'
        opt_obj.type = 'Real'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The percentage of extra bands in an electronic spectroscopy calculation above NBANDS.
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : 0.0
"""
        opt_obj.value = None
        self._options['spectral_perc_extra_bands'] = opt_obj

        self.__dict__['spectral_perc_extra_bands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_nbands'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Determines the number of bands per k-point in electronic spectroscopy calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : NBANDS + (5*SQRT(NBANDS) or SPECTRAL_NEXTRA_BANDS or SPECTRAL_PERC_EXTRA_BANDS)
"""
        opt_obj.value = None
        self._options['spectral_nbands'] = opt_obj

        self.__dict__['spectral_nbands'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_eigenvalue_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of a single eigenvalue/band during  electronic spectroscopy calculation. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-6 eV/eigenvalue
"""
        opt_obj.value = None
        self._options['spectral_eigenvalue_tol'] = opt_obj

        self.__dict__['spectral_eigenvalue_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_xc_functional'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during  an electronic spectroscopy calculation.
Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE03, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.
In addition, we now support libXC and all the additional functionals therein.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['spectral_xc_functional'] = opt_obj

        self.__dict__['spectral_xc_functional'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_xc_definition'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during
a spectral calculation.
This version is a BLOCK keyword, with the flexibility to allow an arbitrary
mixing of any of the basic SPECTRAL_XC_FUNCTIONAL components.
Basic format: a series of separate lines, each containing <func> <weight>
where <func> is the appropriate kernel for either eXchange or Correlation or both
and <weight> is supposed to add to 1.0 for both eXchange and Correlation.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['spectral_xc_definition'] = opt_obj

        self.__dict__['spectral_xc_definition'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_re_est_k_scrn'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """(See description of NLXC_RE_EST_K_SCRN). If this is true then the screening length  will be re-estimated from the density before an electronic spectroscopy calculation.
(If NLXC_RE_EST_K_SCRN is also true then this should have no effect.)
Modifiable: restart only
Allowed values: TRUE or FALSE
Default value : FALSE
"""
        opt_obj.value = None
        self._options['spectral_re_est_k_scrn'] = opt_obj

        self.__dict__['spectral_re_est_k_scrn'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'spectral_write_eigenvalues'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to write out additional eigenvalue information to .castep file.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['spectral_write_eigenvalues'] = opt_obj

        self.__dict__['spectral_write_eigenvalues'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_num_states'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The number of excited states in a TDDFT calculation.
Modifiable: restart only
Allowed values: (any integer) > TDDFT_SELECTED_STATE
Default value : 0
"""
        opt_obj.value = None
        self._options['tddft_num_states'] = opt_obj

        self.__dict__['tddft_num_states'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_selected_state'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The selected excited state for use during geometry optimisation or molecular dynamics.
Modifiable: restart only
Allowed values: (any integer) >= 0
Default value : 0
"""
        opt_obj.value = None
        self._options['tddft_selected_state'] = opt_obj

        self.__dict__['tddft_selected_state'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_eigenvalue_tol'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Tolerance for accepting convergence of a single eigenvalue/state during  tddft calculation. The difference between max and min energies over  TDDFT_CONVERGENCE_WIN iterations must be less than this.
Modifiable: restart and on the fly
Allowed values: (any) > 0.0
Default value : 10^-6 eV/eigenvalue
"""
        opt_obj.value = None
        self._options['tddft_eigenvalue_tol'] = opt_obj

        self.__dict__['tddft_eigenvalue_tol'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_convergence_win'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The TDDFT convergence criteria must be met for TDDFT_CONVERGENCE_WIN iterations  before acceptance.
Modifiable: restart and on the fly
Allowed values: (any integer) >= 2
Default value : 2
"""
        opt_obj.value = None
        self._options['tddft_convergence_win'] = opt_obj

        self.__dict__['tddft_convergence_win'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_max_iter'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The maximum number of iterations to take during a TDDFT calculation.
Modifiable: restart and on the fly
Allowed values: (any integer) > TDDFT_CONVERGENCE_WIN
Default value : 50 for Davidson solver, 200 for CG solver
"""
        opt_obj.value = None
        self._options['tddft_max_iter'] = opt_obj

        self.__dict__['tddft_max_iter'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_nextra_states'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """The number of extra states in a TDDFT calculation above TDDFT_NUM_STATES,  these extra states are not checked for eigenvalue convergence.  Note: only used if TDDFT_SOLVER = DAVIDSON
Modifiable: restart and on the fly
Allowed values: (any integer) >= 0
Default value : set by floor(SQRT(TDDFT_NUM_STATES))
"""
        opt_obj.value = None
        self._options['tddft_nextra_states'] = opt_obj

        self.__dict__['tddft_nextra_states'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_xc_functional'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation kernel during a TDDFT calculation.  Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.
In addition, we now support libXC and all the additional functionals therein.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['tddft_xc_functional'] = opt_obj

        self.__dict__['tddft_xc_functional'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_xc_definition'
        opt_obj.type = 'Block'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The functional to use when calculating the exchange-correlation potential during
a tddft calculation.
This version is a BLOCK keyword, with the flexibility to allow an arbitrary
mixing of any of the basic TDDFT_XC_FUNCTIONAL components.
Basic format: a series of separate lines, each containing <func> <weight>
where <func> is the appropriate kernel for either eXchange or Correlation or both
and <weight> is supposed to add to 1.0 for both eXchange and Correlation.
Modifiable: restart only
Default value : set by XC_FUNCTIONAL
"""
        opt_obj.value = None
        self._options['tddft_xc_definition'] = opt_obj

        self.__dict__['tddft_xc_definition'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """The method by which to approach TDDFT.
Modifiable: restart and on the fly
Allowed values: HUTTER, LANCZOS_CHAIN, DYSON
Default value : HUTTER
"""
        opt_obj.value = None
        self._options['tddft_method'] = opt_obj

        self.__dict__['tddft_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_eigenvalue_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects which method is used to obtain the eigenvalues of the TDDFT matrix.
Modifiable: restart and on the fly
Allowed values: CG, DAVIDSON
Default value : DAVIDSON
"""
        opt_obj.value = None
        self._options['tddft_eigenvalue_method'] = opt_obj

        self.__dict__['tddft_eigenvalue_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_approximation'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects whether or not the Tamm-Dancoff approximation is used in a TDDFT calculation
Modifiable: restart and on the fly
Allowed values: TAMM-DANCOFF, FULL
Default value : TAMM-DANCOFF
"""
        opt_obj.value = None
        self._options['tddft_approximation'] = opt_obj

        self.__dict__['tddft_approximation'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'tddft_position_method'
        opt_obj.type = 'String'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Selects which method to use for the position operator in TDDFT.
Modifiable: restart and on the fly
Allowed values: CRYSTAL, MOLECULAR
The CRYSTAL method is only compatible with (semi)local XC functionals
Default value : MOLECULAR
"""
        opt_obj.value = None
        self._options['tddft_position_method'] = opt_obj

        self.__dict__['tddft_position_method'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ga_pop_size'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Number of distinct configurations in the GA population.
Modifiable: never
Allowed values: (any even integer) >=2
Default value : NUM_ATOMS if even or NUM_ATOMS+1 otherwise
"""
        opt_obj.value = None
        self._options['ga_pop_size'] = opt_obj

        self.__dict__['ga_pop_size'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ga_max_gens'
        opt_obj.type = 'Integer'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Maximum number of generations to evolve population for regardless of convergence.
Modifiable: restart and on the fly
Allowed values: (any integer) > 0
Default value : 3*NUM_ATOMS
"""
        opt_obj.value = None
        self._options['ga_max_gens'] = opt_obj

        self.__dict__['ga_max_gens'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ga_mutate_rate'
        opt_obj.type = 'Real'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Probability of a mutation for each degree of freedom after GA crossover.
Modifiable: restart and on the fly
Allowed values: 0.0 < GA_MUTATE_RATE < 1.0
Default value : 0.15
"""
        opt_obj.value = None
        self._options['ga_mutate_rate'] = opt_obj

        self.__dict__['ga_mutate_rate'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ga_mutate_amp'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Amplitude (+/-) of a mutation if it occurs after GA crossover.
Modifiable: restart and on the fly
Allowed values: (any) >= 0.0
Default value : 1.0 Ang
"""
        opt_obj.value = None
        self._options['ga_mutate_amp'] = opt_obj

        self.__dict__['ga_mutate_amp'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ga_fixed_n'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not the number of atoms in each GA child is constant or  allowed to vary.
Modifiable: restart and on the fly
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['ga_fixed_n'] = opt_obj

        self.__dict__['ga_fixed_n'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'ga_bulk_slice'
        opt_obj.type = 'Boolean'
        opt_obj.level = 'Basic'
        opt_obj.__doc__ = """Specifies whether or not to do a 3D or 2D slice in GA crossover.
Modifiable: never
Allowed values: TRUE or FALSE
Default value : TRUE
"""
        opt_obj.value = None
        self._options['ga_bulk_slice'] = opt_obj

        self.__dict__['ga_bulk_slice'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'excited_state_scissors'
        opt_obj.type = 'Physical'
        opt_obj.level = 'Intermediate'
        opt_obj.__doc__ = """Effectively adds an offset to conduction-band eigenvalues as empirical  correction for LDA/GGA underestimation of band-gaps.
Modifiable: restart and on the fly
Allowed values: (any)
Default value : 0.0
"""
        opt_obj.value = None
        self._options['excited_state_scissors'] = opt_obj

        self.__dict__['excited_state_scissors'] = opt_obj

        opt_obj = Opt()
        opt_obj.keyword = 'devel_code'
        opt_obj.type = 'Block'
        opt_obj.level = 'Expert'
        opt_obj.__doc__ = """Private string for developers only - a way to access test functionality at runtime.
Modifiable: restart and on the fly
Allowed values: (any)
Default value : <empty>
"""
        opt_obj.value = None
        self._options['devel_code'] = opt_obj

        self.__dict__['devel_code'] = opt_obj

types = ['Block', 'Defined', 'Physical', 'Boolean', 'Integer', 'Real', 'String']
levels = ['Basic', 'Expert', 'Dummy', 'Intermediate']
castep_version = 16.1

