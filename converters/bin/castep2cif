#! /bin/sh
#!perl # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Convert a CASTEP output file to CIF format.
#**

use strict;
use warnings;

use File::Basename;
use SOptions;
use SUsage;

my $Id = '$Id$';

my $number = '[-+]?(?:\d+\.?\d*|\.\d+)(?:eE[-+]?\d+)?';


#* USAGE:
#*    $0 --options output*.castep > output.cif
#* 
#* OPTIONS:
#*
#*   --help,--usage         Print a short usage message (this message) and exit.
#**

@ARGV = getOptions( 
    "--options" => sub {
        print <<EOF;
$0: the "--options" option is a placeholder where you can put
any options supported by the $0 program. 
Please see the option list below:
EOF

        SUsage::usage; exit
    },
    "--help,--usage" => sub { SUsage::usage; exit },
);

@ARGV = ( "-" ) unless @ARGV;

for my $filename (@ARGV) {
    open( LOG, $filename ) or
        die "could not open '$filename' for reading: ", lcfirst($!);

    my @log_lines;
    my %log_data;
    my %flags;
    my @cell;
    my @cell_angles;

    while(<LOG>) {
        push( @log_lines, $_ );

        if( /^\s\|\s.*CASTEP\sversion/ ) {
            my @vstring = split;
            ( $log_data{version}, $log_data{program} ) =
                ( $vstring[-2], $vstring[-4] );
        }
        if( /^\s*\*+ General Parameters \*+/...
            /^\s*\*{79,}\s*$/ ) {
            my @line = split(":", $_, 2);
            next if /^\s*\*|^\s*$/;
            if( @line == 2 ) {
                $line[0] =~ s/^\s*|\s*$//g;
                $line[0] =~ s/\s+/_/g;
                $line[0] = "_castep_" . $line[0];
                $line[1] =~ s/^\s*|\s*$//g;
                $log_data{$line[0]} = $line[1];
            }
        }

        if( /^\s+(a|b|c) = +($number) +(alpha|beta|gamma) = +($number)/ ) {
            push( @cell, $2 );
            push( @cell_angles, $4 );
        }
    }

    close( LOG ) or die( "error reading file '$filename': " . lcfirst($!) );

    my $data_name =
        File::Basename::basename( $filename, ('.log', '.dat', '.out'));

    print "data_", $data_name, "\n";

    print "_audit_creation_method '", $Id, "'\n";

    print "_tcod_software_package ", $log_data{program}, "\n"
        if $log_data{program};
    print "_tcod_software_package_version ", $log_data{version}, "\n"
        if $log_data{version};

    print "_cell_length_a ", $cell[0], "\n";
    print "_cell_length_b ", $cell[1], "\n";
    print "_cell_length_c ", $cell[2], "\n";

    print "_cell_angle_alpha ", sprintf( "%f", $cell_angles[0] ), "\n";
    print "_cell_angle_beta  ", sprintf( "%f", $cell_angles[1] ), "\n";
    print "_cell_angle_gamma ", sprintf( "%f", $cell_angles[2] ), "\n";

    for my $key (sort grep /^_castep_/, keys %log_data) {
        my $value = $log_data{$key};
        print $key, " ", $value !~ /\s/ ? $value : "'$value'", "\n";
    }

    print "_tcod_computation_log_file\n";
    print "; \\\n";
    map { print " ", $_ } @log_lines;
    print ";\n";

}
