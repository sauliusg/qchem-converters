#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Extract data from Abinit (http://www.abinit.org/) log files and
#  print them out in CIF (http://www.iucr.org/resources/cif) format
#  using TCOD (http://www.crystallography.net/tcod/) dictionaries
#  (http://www.crystallography.net/tcod/cif/dictionaries/)
#**

use strict;
use COD::AtomProperties;
use File::Basename;
use SOptions;
use SUsage;

my $Id = '$Id$';

my $input_file_list_name;
my $input_task_description_name;

my $atoms = \%COD::AtomProperties::atoms;

my %periodic_table =
    map {
        ( $atoms->{$_}{atomic_number}, {%{$atoms->{$_}}, "symbol" => $_} )
    } keys %COD::AtomProperties::atoms;

my $Ha2eV = 27.21138386; # taken from https://en.wikipedia.org/wiki/Hartree,
                         # the value recommended by CODATA (2006)

#* USAGE:
#*    $0 --options abinit*.out > output.cif
#* 
#* OPTIONS:
#*   --input-file-list abinit.files
#*       Give the name of the file that was given as an argument to the Abinit
#*       computation; contains the list of the computation files.
#*
#*   --input-task-description
#*       Give the name of the "task description file" for this computation
#*       (the first file mentioned in the --input-file-list file).
#*
#*   --help,--usage         Print a short usage message (this message) and exit.
#**

@ARGV = getOptions( 
    "--input-file-list" => \$input_file_list_name,
    "--input-task-description" => \$input_task_description_name,
    "--options" => sub {
        print <<EOF;
$0: the "--options" option is a placeholder where you can put
any options supported by the $0 program. 
Please see the option list below:
EOF

        SUsage::usage; exit
    },
    "--help,--usage" => sub { SUsage::usage; exit },
);

@ARGV = ( "-" ) unless @ARGV;

for my $filename (@ARGV) {
    open( LOG, $filename ) or
        die "could not open '$filename' for reading: ", lcfirst($!);

    my @log_lines;
    my %log_data;

    my %flags;
    my @znumbers;
    my @cell;
    my @cell_angles;

    while(<LOG>) {
        push( @log_lines, $_ );

        if( /^\.Version\s+([\d\.]+)\s+of\s+(ABINIT)/ ) {
            $log_data{program} = $2;
            $log_data{version} = $1;
            %flags = ();
            next;
        }
        if( /^\s*spgroup\s+(\d+)/ ) {
            $log_data{spacegroup} = $1;
            %flags = ();
            next;
        }
        if( /^\s*acell\s+[-+\d\.eE]/ ) {
            @cell = split( " " );
            shift( @cell );
            my $units = pop( @cell );
            if( $units eq "Bohr" ) {
                 # Bohr value taken from http://en.wikipedia.org/wiki/Bohr_radius:
                @cell = map { $_ * 0.529177210 } @cell;
            } else {
                die "unknown units '$units' in file '$filename'";
            }
            %flags = ();
            next;
        }
        if( /^\s*Angles/ ) {
            @cell_angles = split( " " );
            shift( @cell_angles );
            shift( @cell_angles );
            pop( @cell_angles );
            %flags = ();
            next;
        }

        if( /^\s*rprim\s+\d+/ ) {
            my @primitive_vector = split( " " );
            shift( @primitive_vector );
            $log_data{primitive_vectors} = [ \@primitive_vector ];
            $flags{in_rprim} = 1;
            next;
        }

        if( /^\s*znucl\s+[-+\d\.eE]+/ ) {
            @znumbers = split( " " );
            shift( @znumbers );
            $flags{in_znucl} = 1;
            next;
        }

        if( /^\s*typat\s+\d+/ ) {
            my @atom_types = split( " " );
            shift( @atom_types );
            $log_data{atom_types} = \@atom_types;
            $flags{in_typat} = 1;
            next;
        }

        if( /^\s*xangst\s+[-+\d\.eE]+/ ) {
            my @atom_coord_Cartn = split( " " );
            shift( @atom_coord_Cartn );
            $log_data{atom_coord_Cartn} = [ \@atom_coord_Cartn ];
            $flags{in_xangst} = 1;
            next;
        }

        if( /^\s*xred\s+[-+\d\.eE]+/ ) {
            my @atom_coord_fract = split( " " );
            shift( @atom_coord_fract );
            $log_data{atom_coord_fract} = [ \@atom_coord_fract ];
            $flags{in_xred} = 1;
            next;
        }

        if( /^\s*Components of total free energy \(in Hartree\) :/ ) {
            $flags{in_energy} = 1;
            next;
        }

        if( /^\s*cartesian forces \(eV\/Angstrom\) at end:/ ) {
            $log_data{atom_forces_Cartn} = [];
            $flags{in_cartn_forces} = 1;
            next;
        }

        if( /^-\s*Total (cpu|wall clock)\s+time \(s,m,h\):\s+([\d\.]+)/ ) {
            my $key = ($1 eq 'cpu') ? $1 : 'wall';
            $log_data{"total_time_$key"} = $2;
            next;
        }

        if( /^\s*At SCF step\s+\d+, etot is converged\s*:/ ) {
            $flags{in_etot_conv} = 1;
            next;
        }

        if( /^(\s+\d+)+\s*$/ ) {
            my @atom_types = split( " "  );
            push( @{$log_data{atom_types}}, @atom_types );
        }
        elsif( /^(\s+[-+\d\.eE]+)+\s*$/ && $flags{in_xangst} ) {
            my @atom_coord_Cartn = split( " " );
            push( @{$log_data{atom_coord_Cartn}}, \@atom_coord_Cartn );
        }
        elsif( /^(\s+[-+\d\.eE]+)+\s*$/ && $flags{in_xred} ) {
            my @atom_coord_fract = split( " " );
            push( @{$log_data{atom_coord_fract}}, \@atom_coord_fract );
        }
        elsif( /^(\s+[-+\d\.eE]+)+\s*$/ && $flags{in_nucl} ) {
            my @extra_znumbers = split( " " );
            push( @znumbers, @extra_znumbers );
        }
        elsif( /^(\s+[-+\d\.eE]+)+\s*$/ && $flags{in_rprim} ) {
            my @extra_primitive_vectors = split( " " );
            push( @{$log_data{primitive_vectors}}, \@extra_primitive_vectors );
        }
        elsif( /^\s*$/ && $flags{in_energy} ) {
            # Skipping empty lines
        }
        elsif( /^\s*(.*) energy\s*=\s*([-+\d\.eE]+)\s*$/ &&
               $flags{in_energy} ) {
            if(    $1 eq 'Kinetic' ) {
                $log_data{kinetic_energy} = $2 * $Ha2eV;
            }
            elsif( $1 eq 'Hartree' ) {
                $log_data{hartree_energy} = $2 * $Ha2eV;
            }
            elsif( $1 eq 'Ewald' ) {
                $log_data{ewald_energy} = $2 * $Ha2eV;
            }
        }
        elsif( /^\s*>>>>>>>>> Etotal=\s*([-+\d\.eE]+)\s*$/ &&
               $flags{in_energy} ) {
            $log_data{total_energy} = $1 * $Ha2eV;
        }
        elsif( /^(\s+[-+\d\.eE]+)+\s*$/ && $flags{in_cartn_forces} ) {
            my @atom_forces_Cartn = split( " " );
            shift( @atom_forces_Cartn );
            push( @{$log_data{atom_forces_Cartn}}, \@atom_forces_Cartn );
        }
        elsif( /diff in etot=\s*([-+\d\.eE]+) < toldfe=\s*([-+\d\.eE]+)/ &&
               $flags{in_etot_conv} ) {
            $log_data{total_energy_conv} = $2 * $Ha2eV;
        }
        else {
            %flags = ();
        }

    }

    close( LOG ) or die( "error reading file '$filename': " . lcfirst($!) );

    my $data_name =
        File::Basename::basename( $filename, ('.log', '.dat', '.out'));

    print "data_", $data_name, "\n";

    print "_audit_creation_method '", $Id, "'\n";

    print "_tcod_software_package ", $log_data{program}, "\n"
        if $log_data{program};
    print "_tcod_software_package_version ", $log_data{version}, "\n"
        if $log_data{version};
    print "_tcod_computation_CPU_time ", $log_data{total_time_cpu}, "\n"
        if $log_data{total_time_cpu};
    print "_tcod_computation_wall_time ", $log_data{total_time_wall}, "\n"
        if $log_data{total_time_wall};

    if( exists $log_data{primitive_vectors} ) {
        $cell[0] *= vlength( $log_data{primitive_vectors}[0] );
        $cell[1] *= vlength( $log_data{primitive_vectors}[1] );
        $cell[2] *= vlength( $log_data{primitive_vectors}[2] );
    }

    print "_cell_length_a ", $cell[0], "\n";
    print "_cell_length_b ", $cell[1], "\n";
    print "_cell_length_c ", $cell[2], "\n";

    print "_cell_angle_alpha ", sprintf( "%f", $cell_angles[0] ), "\n";
    print "_cell_angle_beta  ", sprintf( "%f", $cell_angles[1] ), "\n";
    print "_cell_angle_gamma ", sprintf( "%f", $cell_angles[2] ), "\n";

    print "# _space_group_IT_number ", $log_data{spacegroup}, "\n"
        if $log_data{spacegroup};

    if( $log_data{atom_types} ) {
        print "loop_\n";
        print "_atom_site_label\n";
        print "_atom_site_type_symbol\n";
        print "_atom_site_fract_x\n";
        print "_atom_site_fract_y\n";
        print "_atom_site_fract_z\n";
        if( $log_data{atom_forces_Cartn} ) {
            print "_tcod_atom_site_resid_force_Cartn_x\n";
            print "_tcod_atom_site_resid_force_Cartn_y\n";
            print "_tcod_atom_site_resid_force_Cartn_z\n";
        }
        print "_atom_site_occupancy\n";
        my $n = 1;
        for my $i (0..$#{$log_data{atom_types}}) {
            my $atomic_number = int($znumbers[$log_data{atom_types}[$i]-1]);
            my $atom = $periodic_table{$atomic_number};
            my $atom_type = $atom->{symbol};
            my $site_label = $atom_type . $n++;
            print $site_label, " ", $atom_type, " ";
            print $log_data{atom_coord_fract}[$i][0], " ";
            print $log_data{atom_coord_fract}[$i][1], " ";
            print $log_data{atom_coord_fract}[$i][2], " ";
            if( $log_data{atom_forces_Cartn} ) {
                print $log_data{atom_forces_Cartn}[$i][0], " ";
                print $log_data{atom_forces_Cartn}[$i][1], " ";
                print $log_data{atom_forces_Cartn}[$i][2], " ";
            }
            print "1.0";
            print "\n";
        }
    }

    print "_tcod_total_energy ", $log_data{total_energy}, "\n"
        if $log_data{total_energy};
    print "_dft_kinetic_energy ", $log_data{kinetic_energy}, "\n"
        if $log_data{kinetic_energy};
    print "_dft_hartree_energy ", $log_data{hartree_energy}, "\n"
        if $log_data{hartree_energy};
    print "_dft_ewald_energy ", $log_data{ewald_energy}, "\n"
        if $log_data{ewald_energy};

    print "# _dft_cell_energy_conv ", $log_data{total_energy_conv}, "\n"
        if $log_data{total_energy_conv};

    print "_tcod_computation_log_file\n";
    print "; \\\n";
    map { print " ", $_ } @log_lines;
    print ";\n";

}

sub vlength
{
    my ($vector) = @_;

    return sqrt(
        $vector->[0] ** 2 +
        $vector->[1] ** 2 +
        $vector->[2] ** 2
    );
}
